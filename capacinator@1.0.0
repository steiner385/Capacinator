
> capacinator@1.0.0 test
> jest --config jest.config.cjs test --no-coverage

FAIL server-integration tests/integration/controllers/AssignmentBusinessRules.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should detect total allocation exceeding 100% during overlapping periods

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should allow assignments when total allocation equals exactly 100%

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should allow assignments in non-overlapping periods even at 100%

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Date Range Overlap Detection › should correctly identify all overlap scenarios

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Date Range Overlap Detection › should handle same-day assignments correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Multi-Assignment Conflict Scenarios › should detect conflicts across multiple overlapping assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Multi-Assignment Conflict Scenarios › should validate assignment exclusion during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should enforce referential integrity for assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should validate assignment date consistency

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should validate allocation percentage bounds

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Performance and Scalability › should handle conflict detection efficiently with many assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

FAIL server-integration tests/integration/projects-api-simple.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  write to custom object with { processEnv: myObject })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should create a new project

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: 1

      39 |       expect(created.name).toBe('Test Project Integration');
      40 |       expect(created.priority).toBe(1);
    > 41 |       expect(created.include_in_demand).toBe(true);
         |                                         ^
      42 |     });
      43 |
      44 |     test('should update a project', async () => {

      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:41:41)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should create a new project

    SqliteError: delete from `project_phases` where `project_id` = '23ddf597-36b0-44d7-bf95-1220dda3ec5e' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should update a project

    SqliteError: delete from `project_phases` where `project_id` = '207fab30-d06b-4c8d-8f42-a7037cd20a3d' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should retrieve project with related data

    SqliteError: insert into `project_phases` (`created_at`, `end_date`, `id`, `name`, `project_id`, `start_date`, `updated_at`) values ('2025-09-24 20:55:44.131', '2024-03-31', 'b94435d8-82d5-4d60-ad4d-248898c88a2a', 'Design Phase', 'f0ffe730-fa1f-4f2a-9f00-6eacda069d5a', '2024-01-01', '2025-09-24 20:55:44.131') - table project_phases has no column named end_date

      82 |       // Create phases
      83 |       const phaseId = uuidv4();
    > 84 |       await db('project_phases').insert({
         |       ^
      85 |         id: phaseId,
      86 |         project_id: testProjectId,
      87 |         name: 'Design Phase',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:84:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should retrieve project with related data

    SqliteError: delete from `project_phases` where `project_id` = 'f0ffe730-fa1f-4f2a-9f00-6eacda069d5a' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should delete project

    SqliteError: delete from `project_phases` where `project_id` = 'baff9a95-4d06-4398-a98e-8043d30a6bae' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Complex Project Queries › should calculate project metrics

    SqliteError: delete from `project_phases` where `project_id` = 'baff9a95-4d06-4398-a98e-8043d30a6bae' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

FAIL server-integration tests/integration/assignment-phase-alignment.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 prevent building .env in docker: https://dotenvx.com/prebuild)

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Assignment Phase Alignment Integration Tests › Phase-Aligned Assignment Creation › should create assignment with computed dates from phase timeline

    ReferenceError: db is not defined

      125 |     it('should create assignment with computed dates from phase timeline', async () => {
      126 |       // Create phase-aligned assignment
    > 127 |       const [assignment] = await db('project_assignments').insert({
          |                            ^
      128 |         id: 'assignment-phase-aligned',
      129 |         project_id: testProjectId,
      130 |         person_id: testPersonId,

      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:127:28)

  ● Assignment Phase Alignment Integration Tests › Phase-Aligned Assignment Creation › should create project-aligned assignment with computed dates from project aspiration

    ReferenceError: db is not defined

      148 |     it('should create project-aligned assignment with computed dates from project aspiration', async () => {
      149 |       // Create project-aligned assignment
    > 150 |       const [assignment] = await db('project_assignments').insert({
          |                            ^
      151 |         id: 'assignment-project-aligned',
      152 |         project_id: testProjectId,
      153 |         person_id: testPersonId,

      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:150:28)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation on Phase Changes › should recalculate phase-aligned assignments when phase dates change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `end_date`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `start_date`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, NULL as `end_date`, 'assignment-analysis-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` union all select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, NULL as `end_date`, 'assignment-development-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` union all select 50 as `allocation_percentage`, 'fixed' as `assignment_date_mode`, '2024-05-31' as `computed_end_date`, '2024-05-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, '2024-05-31' as `end_date`, 'assignment-fixed-dates' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, NULL as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2024-05-01' as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      170 |     beforeEach(async () => {
      171 |       // Create test assignments
    > 172 |       await testDb('project_assignments').insert([
          |       ^
      173 |         {
      174 |           id: 'assignment-analysis-phase',
      175 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:172:7)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation on Phase Changes › should not affect fixed-date assignments when phases change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `end_date`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `start_date`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, NULL as `end_date`, 'assignment-analysis-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` union all select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, NULL as `end_date`, 'assignment-development-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` union all select 50 as `allocation_percentage`, 'fixed' as `assignment_date_mode`, '2024-05-31' as `computed_end_date`, '2024-05-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, '2024-05-31' as `end_date`, 'assignment-fixed-dates' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, NULL as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2024-05-01' as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      170 |     beforeEach(async () => {
      171 |       // Create test assignments
    > 172 |       await testDb('project_assignments').insert([
          |       ^
      173 |         {
      174 |           id: 'assignment-analysis-phase',
      175 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:172:7)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation with Phase Cascading › should recalculate assignments when phase dependencies cause cascading changes

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.138' as `created_at`, 'assignment-analysis-cascade' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.138' as `updated_at` union all select 50 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.138' as `created_at`, 'assignment-development-cascade' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.138' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      281 |     beforeEach(async () => {
      282 |       // Create phase-aligned assignments for both phases
    > 283 |       await testDb('project_assignments').insert([
          |       ^
      284 |         {
      285 |           id: 'assignment-analysis-cascade',
      286 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:283:7)

  ● Assignment Phase Alignment Integration Tests › Conflict Detection with Dynamic Assignments › should detect conflicts when phase changes cause assignment overlaps

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `updated_at`) select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.141' as `created_at`, 'assignment-conflict-1' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.141' as `updated_at` union all select 50 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.141' as `created_at`, 'assignment-conflict-2' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.141' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      360 |     it('should detect conflicts when phase changes cause assignment overlaps', async () => {
      361 |       // Create two overlapping phase-aligned assignments for the same person
    > 362 |       await testDb('project_assignments').insert([
          |       ^
      363 |         {
      364 |           id: 'assignment-conflict-1',
      365 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:362:7)

  ● Assignment Phase Alignment Integration Tests › Project-Aligned Assignment Recalculation › should recalculate project-aligned assignments when project aspiration dates change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `project_id`, `role_id`, `updated_at`) values (25, 'project', '2024-12-31', '2024-01-01', '2025-09-24 20:55:44.145', 'assignment-project-aligned', '22222222-3333-4444-5555-666666666666', '11111111-2222-3333-4444-555555555555', '33333333-4444-5555-6666-777777777777', '2025-09-24 20:55:44.145') - NOT NULL constraint failed: project_assignments.start_date

      415 |   describe('Project-Aligned Assignment Recalculation', () => {
      416 |     beforeEach(async () => {
    > 417 |       await testDb('project_assignments').insert({
          |       ^
      418 |         id: 'assignment-project-aligned',
      419 |         project_id: testProjectId,
      420 |         person_id: testPersonId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:417:7)

FAIL server-integration tests/integration/__tests__/database/scenario-operations.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Scenario Database Operations › Scenario CRUD Operations › should create scenario with proper constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.071Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.071Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario CRUD Operations › should enforce foreign key constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.102Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.102Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario CRUD Operations › should cascade delete scenario data

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.105Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.105Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should enforce unique constraint on scenario assignments

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.108Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.108Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should allow same assignment in different scenarios

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.116Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.116Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should validate assignment date modes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.121Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.121Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignments View › should compute dates correctly for different assignment modes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.125Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.125Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should maintain referential integrity on assignment deletes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.127Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.127Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should handle scenario hierarchy constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.130Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.130Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should validate allocation percentages

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.134Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.134Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Performance and Indexing › should efficiently query scenario assignments

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.137Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.137Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

FAIL server-integration tests/integration/phase-dependencies-performance.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Database query time for 50 dependencies with joins: 1ms

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:327:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Phase Dependencies Performance Tests › Large Project Performance › should handle project with 50 phases efficiently

    ReferenceError: request is not defined

      78 |       const startTime = Date.now();
      79 |       
    > 80 |       const response = await request(app)
         |                        ^
      81 |         .get('/api/project-phases')
      82 |         .query({ project_id: testProjectId })
      83 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:80:24)

  ● Phase Dependencies Performance Tests › Large Project Performance › should handle complex dependency chain efficiently

    Invalid date format, expected YYYY-MM-DD

      48 |     
      49 |     const [year, month, day] = dateString.split('-').map(Number);
    > 50 |     if (!year || !month || !day) throw new Error('Invalid date format, expected YYYY-MM-DD');
         |                                        ^
      51 |     
      52 |     // Create date in local timezone to represent the business date
      53 |     return new Date(year, month - 1, day);

      at ProjectPhaseCascadeService.parseDateSafe (src/server/services/ProjectPhaseCascadeService.ts:50:40)
      at ProjectPhaseCascadeService.validatePhaseChange (src/server/services/ProjectPhaseCascadeService.ts:403:39)
      at ProjectPhaseCascadeService.calculateCascade (src/server/services/ProjectPhaseCascadeService.ts:78:41)
      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:155:22)

  ● Phase Dependencies Performance Tests › Large Project Performance › should handle high dependency density efficiently

    ReferenceError: request is not defined

      228 |       const startTime = Date.now();
      229 |       
    > 230 |       const response = await request(app)
          |                        ^
      231 |         .get('/api/project-phase-dependencies')
      232 |         .query({ project_id: testProjectId })
      233 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:230:24)

  ● Phase Dependencies Performance Tests › Memory Usage › should handle large datasets without excessive memory usage

    ReferenceError: request is not defined

      364 |
      365 |       // Make API call
    > 366 |       await request(app)
          |       ^
      367 |         .get('/api/project-phases')
      368 |         .query({ project_id: testProjectId })
      369 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:366:7)

  ● Phase Dependencies Performance Tests › Concurrent Operations › should handle multiple cascade calculations concurrently

    ReferenceError: request is not defined

      441 |         };
      442 |
    > 443 |         cascadePromises.push(
          |                         ^
      444 |           request(app)
      445 |             .post('/api/project-phase-dependencies/calculate-cascade')
      446 |             .send(cascadeData)

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:443:25)

FAIL server-unit tests/unit/server/controllers/ProjectsController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      📧 Notification scheduler initialized

      at NotificationScheduler.initializeScheduler (src/server/services/NotificationScheduler.ts:20:13)

  ● ProjectsController › getAll › should retrieve all projects with default ordering

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: [{"id": "1", "name": "Project A", "status": "active"}, {"id": "2", "name": "Project B", "status": "completed"}]

    Number of calls: 0

      82 |       await controller.getAll(req as Request, res as Response);
      83 |
    > 84 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
         |                        ^
      85 |       expect(mockQuery.select).toHaveBeenCalledWith('*');
      86 |       expect(mockQuery.orderBy).toHaveBeenCalledWith('created_at', 'desc');
      87 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:84:24)

  ● ProjectsController › getAll › should handle database errors gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 500

    Number of calls: 0

      94 |       await controller.getAll(req as Request, res as Response);
      95 |
    > 96 |       expect(res.status).toHaveBeenCalledWith(500);
         |                          ^
      97 |       expect(res.json).toHaveBeenCalledWith({ 
      98 |         error: 'Failed to fetch projects',
      99 |         details: 'Database connection failed'

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:96:26)

  ● ProjectsController › getAll › should apply filters when provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "status", "active"

    Number of calls: 0

      116 |       await controller.getAll(req as Request, res as Response);
      117 |
    > 118 |       expect(mockQuery.where).toHaveBeenCalledWith('status', 'active');
          |                               ^
      119 |       expect(mockQuery.where).toHaveBeenCalledWith('project_type_id', 'type-123');
      120 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
      121 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:118:31)

  ● ProjectsController › getAll › should handle pagination parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 10

    Number of calls: 0

      134 |       await controller.getAll(req as Request, res as Response);
      135 |
    > 136 |       expect(mockQuery.limit).toHaveBeenCalledWith(10);
          |                               ^
      137 |       expect(mockQuery.offset).toHaveBeenCalledWith(20);
      138 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
      139 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:136:31)

  ● ProjectsController › getById › should retrieve project by ID with related data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"assignments": [{"id": "assign-1", "person_id": "person-1", "project_id": "project-123"}], "id": "project-123", "name": "Test Project", "phases": [{"id": "phase-1", "name": "Phase 1", "project_id": "project-123"}], "planners": [], "project_type_id": "type-123"}

    Number of calls: 0

      172 |       await controller.getById(req as Request, res as Response);
      173 |
    > 174 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      175 |         ...mockProject,
      176 |         phases: mockPhases,
      177 |         assignments: mockAssignments,

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:174:24)

  ● ProjectsController › getById › should return 404 when project not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      188 |       await controller.getById(req as Request, res as Response);
      189 |
    > 190 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      191 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      192 |     });
      193 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:190:26)

  ● ProjectsController › create › should create new project with validation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 201

    Number of calls: 0

      230 |       await controller.create(req as Request, res as Response);
      231 |
    > 232 |       expect(res.status).toHaveBeenCalledWith(201);
          |                          ^
      233 |       expect(res.json).toHaveBeenCalledWith(createdProject);
      234 |     });
      235 |

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:232:26)

  ● ProjectsController › create › should reject invalid project type

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      245 |       await controller.create(req as Request, res as Response);
      246 |
    > 247 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      248 |       expect(res.json).toHaveBeenCalledWith({ error: 'Invalid project type' });
      249 |     });
      250 |

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:247:26)

  ● ProjectsController › create › should reject missing required fields

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      254 |       await controller.create(req as Request, res as Response);
      255 |
    > 256 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      257 |       expect(res.json).toHaveBeenCalledWith({ 
      258 |         error: 'Name and project type are required' 
      259 |       });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:256:26)

  ● ProjectsController › update › should update project with validation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"id": "project-123", "name": "Updated Project Name", "project_sub_type_id": "new-subtype-456", "project_type_id": "type-123", "updated_at": 2025-09-25T00:55:44.190Z}

    Number of calls: 0

      301 |       await controller.update(req as Request, res as Response);
      302 |
    > 303 |       expect(res.json).toHaveBeenCalledWith(updatedProject);
          |                        ^
      304 |     });
      305 |
      306 |     test('should return 404 when updating non-existent project', async () => {

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:303:24)

  ● ProjectsController › update › should return 404 when updating non-existent project

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      313 |       await controller.update(req as Request, res as Response);
      314 |
    > 315 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      316 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      317 |     });
      318 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:315:26)

  ● ProjectsController › delete › should delete project successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"message": "Project deleted successfully"}

    Number of calls: 0

      328 |       await controller.delete(req as Request, res as Response);
      329 |
    > 330 |       expect(res.json).toHaveBeenCalledWith({ 
          |                        ^
      331 |         message: 'Project deleted successfully' 
      332 |       });
      333 |       expect(mockQuery.where).toHaveBeenCalledWith('id', 'project-to-delete');

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:330:24)

  ● ProjectsController › delete › should return 404 when deleting non-existent project

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      344 |       await controller.delete(req as Request, res as Response);
      345 |
    > 346 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      347 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      348 |     });
      349 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:346:26)

  ● ProjectsController › Complex Queries › should handle project with all related entities

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"assignments": [{"allocation_percentage": 100, "id": "assign-1", "person_id": "person-1", "role_id": "role-1"}], "budget": 1000000, "id": "complex-project", "location_id": "loc-456", "name": "Complex Project", "phases": [{"end_date": "2024-03-01", "id": "phase-1", "name": "Design Phase", "start_date": "2024-01-01"}, {"end_date": "2024-09-01", "id": "phase-2", "name": "Development Phase", "start_date": "2024-03-01"}], "planners": [{"user_id": "user-1", "user_name": "Project Manager"}], "project_type_id": "type-123", "status": "active"}

    Number of calls: 0

      407 |       await controller.getById(req as Request, res as Response);
      408 |
    > 409 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      410 |         ...mockProject,
      411 |         phases: mockPhases,
      412 |         assignments: mockAssignments,

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:409:24)

FAIL server-integration tests/integration/__tests__/scenario-conflict-detection.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  load multiple .env files with { path: ['.env.local', '.env'] })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect assignment conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.100Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.100Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect phase timeline conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.136Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.136Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect project detail conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.139Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.139Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should not detect conflicts for identical data

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.144Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.144Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should handle multiple conflicts across different types

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.147Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.147Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should maintain data integrity during successful merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.151Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.151Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should rollback completely on merge failure

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.155Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.155Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should handle concurrent modifications safely

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.158Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.158Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should preserve foreign key relationships during merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.161Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.161Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should handle complex assignment date mode scenarios

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.164Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.164Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should handle empty scenarios gracefully

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.167Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.167Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should handle null and undefined values in conflict detection

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.170Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.170Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should validate scenario state before merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.173Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.173Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

FAIL server-integration tests/integration/utilization-modals-api.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      📧 Notification scheduler initialized

      at NotificationScheduler.initializeScheduler (src/server/services/NotificationScheduler.ts:20:13)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Cleanup error: SqliteError { code: 'SQLITE_ERROR' }

      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:151:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should retrieve person assignments for reduce load modal

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should successfully delete assignment and update utilization

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should calculate removal scores correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should retrieve available projects for assignment

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should successfully create new assignment

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should prevent over-allocation during assignment creation

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should calculate match scores for project recommendations

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should calculate realistic estimated hours

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Utilization Report Integration › should reflect assignment changes in utilization report

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Utilization Report Integration › should handle concurrent assignment operations

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should maintain referential integrity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should validate allocation percentage bounds

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should handle date validation correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

FAIL server-integration tests/integration/controllers/AssignmentsController.integration.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      📧 Notification scheduler initialized

      at NotificationScheduler.initializeScheduler (src/server/services/NotificationScheduler.ts:20:13)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should prevent assignments that exceed 100% capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should allow assignments within available capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should handle exact 100% allocation correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should prevent even 1% over capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Date Range Validation › should detect overlapping date ranges correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Date Range Validation › should handle same-day assignments correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Person Availability Integration › should respect person availability overrides

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Person Availability Integration › should handle zero availability correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Assignment Exclusion › should exclude current assignment from conflict checking during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Assignment Exclusion › should still detect conflicts with other assignments during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle invalid person ID gracefully

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle invalid date formats gracefully

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle negative allocation percentages

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle very high allocation percentages

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Real-world Scenarios › should handle complex multi-project allocation scenario

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Real-world Scenarios › should validate assignment timeline gaps and overlaps

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)


  ● Test suite failed to run

    SqliteError: delete from `person_roles` where `person_id` = 'd63724ef-f751-4542-8418-987de14c6d65' - no such table: person_roles

      89 |     // Clean up test data
      90 |     await db('person_availability_overrides').where('person_id', testData.person_id).del();
    > 91 |     await db('person_roles').where('person_id', testData.person_id).del();
         |     ^
      92 |     await db('project_assignments').where('person_id', testData.person_id).del();
      93 |     await db('roles').where('id', testData.role_id).del();
      94 |     await db('projects').whereIn('id', [testData.project1_id, testData.project2_id]).del();

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:91:5)

FAIL server-integration tests/integration/phase-dependencies-api.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`)

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      📧 Notification scheduler initialized

      at NotificationScheduler.initializeScheduler (src/server/services/NotificationScheduler.ts:20:13)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      🔧 Using development database

      at getDb (src/server/database/index.ts:30:15)

    console.error
      Error fetching project phase dependencies: SqliteError { code: 'SQLITE_ERROR' }

      11 |       res.json(dependencies);
      12 |     } catch (error) {
    > 13 |       console.error('Error fetching project phase dependencies:', error);
         |               ^
      14 |       res.status(500).json({ error: 'Failed to fetch dependencies' });
      15 |     }
      16 |   }

      at Function.getAll (src/server/api/controllers/ProjectPhaseDependenciesController.ts:13:15)

    console.error
      Error fetching project phase dependencies: SqliteError { code: 'SQLITE_ERROR' }

      11 |       res.json(dependencies);
      12 |     } catch (error) {
    > 13 |       console.error('Error fetching project phase dependencies:', error);
         |               ^
      14 |       res.status(500).json({ error: 'Failed to fetch dependencies' });
      15 |     }
      16 |   }

      at Function.getAll (src/server/api/controllers/ProjectPhaseDependenciesController.ts:13:15)

    console.error
      Error fetching project phase dependencies: SqliteError { code: 'SQLITE_ERROR' }

      11 |       res.json(dependencies);
      12 |     } catch (error) {
    > 13 |       console.error('Error fetching project phase dependencies:', error);
         |               ^
      14 |       res.status(500).json({ error: 'Failed to fetch dependencies' });
      15 |     }
      16 |   }

      at Function.getAll (src/server/api/controllers/ProjectPhaseDependenciesController.ts:13:15)

    console.error
      Error fetching dependency: SqliteError { code: 'SQLITE_ERROR' }

      29 |       res.json(dependency);
      30 |     } catch (error) {
    > 31 |       console.error('Error fetching dependency:', error);
         |               ^
      32 |       res.status(500).json({ error: 'Failed to fetch dependency' });
      33 |     }
      34 |   }

      at Function.getById (src/server/api/controllers/ProjectPhaseDependenciesController.ts:31:15)

    console.error
      Error fetching dependency: SqliteError { code: 'SQLITE_ERROR' }

      29 |       res.json(dependency);
      30 |     } catch (error) {
    > 31 |       console.error('Error fetching dependency:', error);
         |               ^
      32 |       res.status(500).json({ error: 'Failed to fetch dependency' });
      33 |     }
      34 |   }

      at Function.getById (src/server/api/controllers/ProjectPhaseDependenciesController.ts:31:15)

    console.error
      Error creating dependency: SqliteError { code: 'SQLITE_ERROR' }

      42 |       res.status(201).json(dependency);
      43 |     } catch (error) {
    > 44 |       console.error('Error creating dependency:', error);
         |               ^
      45 |       res.status(500).json({ error: 'Failed to create dependency' });
      46 |     }
      47 |   }

      at Function.create (src/server/api/controllers/ProjectPhaseDependenciesController.ts:44:15)

    console.error
      Error creating dependency: SqliteError { code: 'SQLITE_ERROR' }

      42 |       res.status(201).json(dependency);
      43 |     } catch (error) {
    > 44 |       console.error('Error creating dependency:', error);
         |               ^
      45 |       res.status(500).json({ error: 'Failed to create dependency' });
      46 |     }
      47 |   }

      at Function.create (src/server/api/controllers/ProjectPhaseDependenciesController.ts:44:15)

    console.error
      Error creating dependency: SqliteError { code: 'SQLITE_ERROR' }

      42 |       res.status(201).json(dependency);
      43 |     } catch (error) {
    > 44 |       console.error('Error creating dependency:', error);
         |               ^
      45 |       res.status(500).json({ error: 'Failed to create dependency' });
      46 |     }
      47 |   }

      at Function.create (src/server/api/controllers/ProjectPhaseDependenciesController.ts:44:15)

    console.error
      Error creating dependency: SqliteError { code: 'SQLITE_ERROR' }

      42 |       res.status(201).json(dependency);
      43 |     } catch (error) {
    > 44 |       console.error('Error creating dependency:', error);
         |               ^
      45 |       res.status(500).json({ error: 'Failed to create dependency' });
      46 |     }
      47 |   }

      at Function.create (src/server/api/controllers/ProjectPhaseDependenciesController.ts:44:15)

    console.error
      Error updating dependency: SqliteError { code: 'SQLITE_ERROR' }

      61 |       res.json(dependency);
      62 |     } catch (error) {
    > 63 |       console.error('Error updating dependency:', error);
         |               ^
      64 |       res.status(500).json({ error: 'Failed to update dependency' });
      65 |     }
      66 |   }

      at Function.update (src/server/api/controllers/ProjectPhaseDependenciesController.ts:63:15)

    console.error
      Error deleting dependency: SqliteError { code: 'SQLITE_ERROR' }

      79 |       res.status(204).send();
      80 |     } catch (error) {
    > 81 |       console.error('Error deleting dependency:', error);
         |               ^
      82 |       res.status(500).json({ error: 'Failed to delete dependency' });
      83 |     }
      84 |   }

      at Function.delete (src/server/api/controllers/ProjectPhaseDependenciesController.ts:81:15)

    console.log
      Apply cascade error: {}

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:495:17)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should retrieve dependencies for a project

    expected 200 "OK", got 500 "Internal Server Error"

      126 |         .get('/api/project-phase-dependencies')
      127 |         .query({ project_id: testProjectId })
    > 128 |         .expect(200);
          |          ^
      129 |
      130 |       expect(response.body.data).toHaveLength(1);
      131 |       expect(response.body.data[0]).toMatchObject({

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:128:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should support pagination

    expected 200 "OK", got 500 "Internal Server Error"

      159 |           limit: 1
      160 |         })
    > 161 |         .expect(200);
          |          ^
      162 |
      163 |       expect(response.body.data).toHaveLength(1);
      164 |       expect(response.body.pagination).toMatchObject({

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:161:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should return empty array for project with no dependencies

    expected 200 "OK", got 500 "Internal Server Error"

      184 |         .get('/api/project-phase-dependencies')
      185 |         .query({ project_id: project2.id })
    > 186 |         .expect(200);
          |          ^
      187 |
      188 |       expect(response.body.data).toHaveLength(0);
      189 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:186:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies/:id › should retrieve a specific dependency

    expected 200 "OK", got 500 "Internal Server Error"

      211 |       const response = await request
      212 |         .get(`/api/project-phase-dependencies/${testDependencyId}`)
    > 213 |         .expect(200);
          |          ^
      214 |
      215 |       expect(response.body.data).toMatchObject({
      216 |         id: testDependencyId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:213:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies › should create a new dependency

    expected 200 "OK", got 500 "Internal Server Error"

      242 |         .post('/api/project-phase-dependencies')
      243 |         .send(dependencyData)
    > 244 |         .expect(200);
          |          ^
      245 |
      246 |       expect(response.body.data).toMatchObject({
      247 |         project_id: testProjectId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:244:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › PUT /api/project-phase-dependencies/:id › should update dependency properties

    expected 200 "OK", got 500 "Internal Server Error"

      338 |         .put(`/api/project-phase-dependencies/${testDependencyId}`)
      339 |         .send(updateData)
    > 340 |         .expect(200);
          |          ^
      341 |
      342 |       expect(response.body.data).toMatchObject({
      343 |         id: testDependencyId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:340:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › DELETE /api/project-phase-dependencies/:id › should delete dependency

    expected 200 "OK", got 500 "Internal Server Error"

      373 |       const response = await request
      374 |         .delete(`/api/project-phase-dependencies/${testDependencyId}`)
    > 375 |         .expect(200);
          |          ^
      376 |
      377 |       expect(response.body.message).toBe('Dependency deleted successfully');
      378 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:375:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/calculate-cascade › should calculate cascade effects

    expected 200 "OK", got 404 "Not Found"

      424 |         .post('/api/project-phase-dependencies/calculate-cascade')
      425 |         .send(cascadeData)
    > 426 |         .expect(200);
          |          ^
      427 |
      428 |       expect(response.body.data).toHaveProperty('affected_phases');
      429 |       expect(response.body.data).toHaveProperty('cascade_count');

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:426:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/calculate-cascade › should validate required fields

    expected 500 "Internal Server Error", got 404 "Not Found"

      445 |         .post('/api/project-phase-dependencies/calculate-cascade')
      446 |         .send(incompleteData)
    > 447 |         .expect(500);
          |          ^
      448 |     });
      449 |   });
      450 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:447:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/apply-cascade › should apply cascade changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      496 |       }
      497 |       
    > 498 |       expect(response.status).toBe(200);
          |                               ^
      499 |
      500 |       expect(response.body.message).toBe('Cascade changes applied successfully');
      501 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:498:31)

FAIL server-integration tests/integration/controllers/ScenariosController.edge-cases.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  write to custom object with { processEnv: myObject })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      🔧 Using development database

      at getDb (src/server/database/index.ts:30:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.log
      ✅ Concurrent merges: 0 succeeded, 3 failed gracefully

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:487:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.log
      ✅ Created 0 scenarios with duplicate names

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:508:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Date validation test - Start: invalid-date, End: 2025-12-31, Status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:582:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Date validation test - Start: 2025-01-01, End: not-a-date, Status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:582:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Date validation test - Start: 2025-12-31, End: 2025-01-01, Status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:582:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Date validation test - Start: 2025-13-01, End: 2025-12-31, Status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:582:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Date validation test - Start: 2025-01-32, End: 2025-12-31, Status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:582:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.log
      ✅ Correctly rejected incomplete assignment: {"project_id":"proj1-000-0000-0000-000000000001"}

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:618:17)

    console.log
      ✅ Correctly rejected incomplete assignment: {"person_id":"user1-0000-0000-0000-000000000001"}

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:618:17)

    console.log
      ✅ Correctly rejected incomplete assignment: {"role_id":"role1-000-0000-0000-000000000001"}

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:618:17)

    console.log
      ✅ Correctly rejected incomplete assignment: {"project_id":"proj1-000-0000-0000-000000000001","person_id":"user1-0000-0000-0000-000000000001","role_id":"role1-000-0000-0000-000000000001"}

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:618:17)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Created 100 assignments in 295ms

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:675:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.compare (src/server/api/controllers/ScenariosController.ts:316:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      Memory increase: 9MB

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:728:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.getAssignments (src/server/api/controllers/ScenariosController.ts:192:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.getById (src/server/api/controllers/ScenariosController.ts:31:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.merge (src/server/api/controllers/ScenariosController.ts:376:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.getAssignments (src/server/api/controllers/ScenariosController.ts:192:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.getById (src/server/api/controllers/ScenariosController.ts:31:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.log
      Invalid parent reference handled with status: 500

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:804:15)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.create (src/server/api/controllers/ScenariosController.ts:74:20)

    console.error
      Controller error: SqliteError { code: 'SQLITE_ERROR' }

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at ScenariosController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at ScenariosController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at ScenariosController.upsertAssignment (src/server/api/controllers/ScenariosController.ts:228:20)

    console.log
      ✅ Constraint violations handled appropriately

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:830:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

  ● ScenariosController - Complex Edge Cases › Multi-Level Hierarchy Edge Cases › should prevent circular dependencies in scenario hierarchy

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      181 |         });
      182 |
    > 183 |       expect(parentResponse.status).toBe(201);
          |                                     ^
      184 |       const parentId = parentResponse.body.id;
      185 |
      186 |       // Create child scenario

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:183:37)

  ● ScenariosController - Complex Edge Cases › Multi-Level Hierarchy Edge Cases › should handle deep hierarchy performance efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      254 |           });
      255 |
    > 256 |         expect(response.status).toBe(201);
          |                                 ^
      257 |         currentParentId = response.body.id;
      258 |       }
      259 |

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:256:33)

  ● ScenariosController - Complex Edge Cases › Complex Conflict Resolution Edge Cases › should handle cascading conflicts with multiple assignment changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      366 |         });
      367 |
    > 368 |       expect(mergeResponse.status).toBe(200);
          |                                    ^
      369 |       
      370 |       if (!mergeResponse.body.success) {
      371 |         expect(mergeResponse.body.conflicts).toBeGreaterThan(0);

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:368:36)

  ● ScenariosController - Complex Edge Cases › Complex Conflict Resolution Edge Cases › should handle over-allocation conflicts during merge

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      437 |
      438 |       // System should handle this gracefully
    > 439 |       expect(mergeResponse.status).toBe(200);
          |                                    ^
      440 |       console.log('✅ Over-allocation scenario handled during merge');
      441 |     });
      442 |   });

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:439:36)

  ● ScenariosController - Complex Edge Cases › Concurrent Operation Edge Cases › should handle concurrent merge attempts gracefully

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

      486 |
      487 |       console.log(`✅ Concurrent merges: ${successful.length} succeeded, ${failed.length} failed gracefully`);
    > 488 |       expect(successful.length).toBeGreaterThanOrEqual(1);
          |                                 ^
      489 |     });
      490 |
      491 |     test('should handle concurrent scenario creation with same names', async () => {

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:488:33)

  ● ScenariosController - Complex Edge Cases › Concurrent Operation Edge Cases › should handle concurrent scenario creation with same names

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      507 |       const successful = results.filter(r => r.status === 'fulfilled' && r.value.status === 201);
      508 |       console.log(`✅ Created ${successful.length} scenarios with duplicate names`);
    > 509 |       expect(successful.length).toBe(5);
          |                                 ^
      510 |     });
      511 |   });
      512 |

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:509:33)

  ● ScenariosController - Complex Edge Cases › Data Integrity and Validation Edge Cases › should validate assignment percentage bounds strictly

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      540 |         // Should reject invalid percentages
      541 |         if (percentage <= 0 || percentage > 100) {
    > 542 |           expect(response.status).toBe(400);
          |                                   ^
      543 |           console.log(`✅ Correctly rejected allocation percentage: ${percentage}%`);
      544 |         }
      545 |       }

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:542:35)

  ● ScenariosController - Complex Edge Cases › Performance and Scalability Edge Cases › should handle large comparison datasets efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      680 |         .get(`/api/scenarios/${scenario1Id}/compare?compare_to=${scenario2Id}`);
      681 |
    > 682 |       expect(compareResponse.status).toBe(200);
          |                                      ^
      683 |       const compareTime = Date.now() - compareStartTime;
      684 |       console.log(`Compared ${assignmentCount * 2} assignments in ${compareTime}ms`);
      685 |       expect(compareTime).toBeLessThan(5000); // Should complete within 5 seconds

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:682:38)

  ● ScenariosController - Complex Edge Cases › Error Recovery Edge Cases › should rollback partial merge failures correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      784 |       const finalChildState = await supertest(app).get(`/api/scenarios/${childId}`);
      785 |
    > 786 |       expect(finalParentState.status).toBe(200);
          |                                       ^
      787 |       expect(finalChildState.status).toBe(200);
      788 |       console.log('✅ System state remained consistent after merge operation');
      789 |     });

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:786:39)

PASS client tests/unit/client/People.workload-management.test.tsx
PASS client tests/unit/client/AssignmentNew.contextual-prefill.test.tsx
PASS client client/src/components/ui/__tests__/DataTable.test.tsx
PASS client tests/unit/client/ProjectRoadmap.test.tsx
PASS client client/src/pages/__tests__/ProjectTypeDetails.test.tsx
PASS client client/src/components/ui/__tests__/DetailTable.test.tsx
PASS client client/src/pages/__tests__/AuditLog.test.tsx
PASS client tests/unit/client/PersonDetails.utilization-timeline.test.tsx
PASS server-unit tests/unit/server/controllers/AssignmentsController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 prevent building .env in docker: https://dotenvx.com/prebuild)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client client/src/pages/__tests__/Roles.test.tsx
PASS server-unit tests/unit/server/controllers/PeopleController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client client/src/components/ui/__tests__/SimpleModal.test.tsx
PASS client client/src/components/ui/__tests__/Modal.test.tsx
PASS client tests/unit/client/components/VisualPhaseManager.dependencies.test.tsx
  ● Console

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.error
      An update to VisualPhaseManager inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at forceStoreRerender (node_modules/react-dom/cjs/react-dom-client.development.js:6124:24)
      at node_modules/react-dom/cjs/react-dom-client.development.js:6109:41
      at node_modules/@tanstack/query-core/src/notifyManager.ts:71:11
      at notifyFn (node_modules/@tanstack/query-core/src/notifyManager.ts:19:5)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:42:13
          at Array.forEach (<anonymous>)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:41:25
      at batchNotifyFn (node_modules/@tanstack/query-core/src/notifyManager.ts:22:5)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:40:9
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.error
      An update to VisualPhaseManager inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at forceStoreRerender (node_modules/react-dom/cjs/react-dom-client.development.js:6124:24)
      at node_modules/react-dom/cjs/react-dom-client.development.js:6109:41
      at node_modules/@tanstack/query-core/src/notifyManager.ts:71:11
      at notifyFn (node_modules/@tanstack/query-core/src/notifyManager.ts:19:5)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:42:13
          at Array.forEach (<anonymous>)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:41:25
      at batchNotifyFn (node_modules/@tanstack/query-core/src/notifyManager.ts:22:5)
      at node_modules/@tanstack/query-core/src/notifyManager.ts:40:9
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.error
      Phase update validation failed: [
        'Dependency validation failed: Phase cannot start before predecessor ends'
      ]

      280 |       if (err?.response?.data?.validation_errors) {
      281 |         const errors = err.response.data.validation_errors;
    > 282 |         console.error('Phase update validation failed:', errors);
          |                 ^
      283 |         // TODO: Display errors in UI (could use a toast notification or modal)
      284 |         alert('Dependency validation failed:\n' + errors.join('\n'));
      285 |       } else {

      at Object.onError (client/src/components/VisualPhaseManager.tsx:282:17)
      at Mutation.execute (node_modules/@tanstack/query-core/src/mutation.ts:248:28)

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

    console.log
      ⚠️ VisualPhaseManager: No alignment dimensions provided

      at client/src/components/VisualPhaseManager.tsx:62:15

PASS server-unit tests/unit/server/controllers/ProjectPhaseDependenciesController.simple.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  write to custom object with { processEnv: myObject })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client client/src/pages/__tests__/Assignments.test.tsx
  ● Console

    console.error
      An update to Assignments inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      61 |         setContextMessage(message);
      62 |         // Auto-clear the message after 5 seconds
    > 63 |         setTimeout(() => setContextMessage(null), 5000);
         |                          ^
      64 |       }
      65 |     }
      66 |   }, [searchParams]);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at client/src/pages/Assignments.tsx:63:26
      at callTimer (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:806:24)
      at doTickInner (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:1413:29)
      at doTick (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:1494:20)
      at Object.tick (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:1502:20)
      at FakeTimers.advanceTimersByTime (node_modules/@jest/fake-timers/build/index.js:576:19)
      at Object.<anonymous> (client/src/pages/__tests__/Assignments.test.tsx:581:12)

PASS client tests/unit/client/Scenarios.test.tsx
PASS server-integration tests/integration/services/AuditService.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  load multiple .env files with { path: ['.env.local', '.env'] })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.log
      Setting up test database...

      at Object.<anonymous> (tests/integration/setup.ts:27:11)

    console.log
      Test database schema created

      at Object.<anonymous> (tests/integration/setup.ts:58:13)

    console.log
      Test database seeded with basic data

      at Object.<anonymous> (tests/integration/setup.ts:68:15)

    console.log
      Test database connection closed

      at Object.<anonymous> (tests/integration/setup.ts:80:13)

PASS server-unit tests/unit/server/controllers/SettingsController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/services/AuditService.standalone.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  override existing env vars with { override: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/services/EmailService.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  load multiple .env files with { path: ['.env.local', '.env'] })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.error
      Email service connection test failed: Error: Connection failed
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/services/EmailService.test.ts:141:48)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

      94 |       return true;
      95 |     } catch (error) {
    > 96 |       console.error('Email service connection test failed:', error);
         |               ^
      97 |       return false;
      98 |     }
      99 |   }

      at EmailService.testConnection (src/server/services/EmailService.ts:96:15)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:143:22)

    console.error
      Error fetching notification preferences: Error: Database error
          at /home/tony/GitHub/Capacinator/tests/unit/server/services/EmailService.test.ts:211:15
          at /home/tony/GitHub/Capacinator/node_modules/jest-mock/build/index.js:305:39
          at /home/tony/GitHub/Capacinator/node_modules/jest-mock/build/index.js:312:13
          at mockConstructor (/home/tony/GitHub/Capacinator/node_modules/jest-mock/build/index.js:102:19)
          at EmailService.getUserNotificationPreferences (/home/tony/GitHub/Capacinator/src/server/services/EmailService.ts:124:22)
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/services/EmailService.test.ts:214:41)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

      126 |         .where('enabled', true);
      127 |     } catch (error) {
    > 128 |       console.error('Error fetching notification preferences:', error);
          |               ^
      129 |       return [];
      130 |     }
      131 |   }

      at EmailService.getUserNotificationPreferences (src/server/services/EmailService.ts:128:15)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:214:41)

    console.log
      Email sent successfully: test-id

      at EmailService.sendEmail (src/server/services/EmailService.ts:226:15)

    console.log
      Email notification skipped for user user1 - notifications disabled

      at EmailService.sendEmail (src/server/services/EmailService.ts:201:17)

    console.warn
      Email service not configured - skipping email send

      191 |   public async sendEmail(options: SendEmailOptions): Promise<boolean> {
      192 |     if (!this.transporter || !this.config) {
    > 193 |       console.warn('Email service not configured - skipping email send');
          |               ^
      194 |       return false;
      195 |     }
      196 |

      at EmailService.sendEmail (src/server/services/EmailService.ts:193:15)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:367:41)

    console.log
      Test email sent successfully: test-id

      at EmailService.sendTestEmail (src/server/services/EmailService.ts:351:15)

    console.error
      Failed to send test email: Error: SMTP Error
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/services/EmailService.test.ts:397:50)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

      352 |       return true;
      353 |     } catch (error) {
    > 354 |       console.error('Failed to send test email:', error);
          |               ^
      355 |       throw error;
      356 |     }
      357 |   }

      at EmailService.sendTestEmail (src/server/services/EmailService.ts:354:15)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:399:7)

    console.warn
      User nonexistent not found or has no email address

      284 |       const user = await db('people').where('id', userId).first();
      285 |       if (!user || !user.email) {
    > 286 |         console.warn(`User ${userId} not found or has no email address`);
          |                 ^
      287 |         return false;
      288 |       }
      289 |

      at EmailService.sendNotificationEmail (src/server/services/EmailService.ts:286:17)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:451:22)

    console.warn
      Email template 'nonexistent_template' not found

      291 |       const template = await this.getEmailTemplate(templateName);
      292 |       if (!template) {
    > 293 |         console.warn(`Email template '${templateName}' not found`);
          |                 ^
      294 |         return false;
      295 |       }
      296 |

      at EmailService.sendNotificationEmail (src/server/services/EmailService.ts:293:17)
      at Object.<anonymous> (tests/unit/server/services/EmailService.test.ts:469:22)

PASS client client/src/components/ui/__tests__/ModalCore.test.tsx
  ● Console

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

PASS client client/src/components/modals/__tests__/ModalBackgrounds-simplified.test.tsx
  ● Console

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

    console.log
      SimpleModal render - isOpen: true

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:41:11)

    console.log
      SimpleModal rendering backdrop and content

      at SimpleModal (client/src/components/ui/SimpleModal.tsx:48:11)

PASS server-unit tests/unit/server/services/AuditService.simple.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/middleware/auditMiddleware.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client tests/unit/client/actionable-insights-simple.test.tsx
PASS server-unit tests/unit/server/config/auditConfig.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/controllers/ProjectsController.simple.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 encrypt with dotenvx: https://dotenvx.com)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client client/src/pages/__tests__/People.test.tsx
PASS server-unit tests/unit/server/controllers/UserPermissionsController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS client client/src/components/__tests__/ModalStyling.test.tsx
PASS client client/src/pages/__tests__/Projects.test.tsx
PASS client client/src/pages/__tests__/Reports.test.tsx
PASS server-unit tests/unit/server/controllers/ProjectPhaseDependenciesController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.error
      Error fetching project phase dependencies: Error: Database error
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/controllers/ProjectPhaseDependenciesController.test.ts:84:21)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

      11 |       res.json(dependencies);
      12 |     } catch (error) {
    > 13 |       console.error('Error fetching project phase dependencies:', error);
         |               ^
      14 |       res.status(500).json({ error: 'Failed to fetch dependencies' });
      15 |     }
      16 |   }

      at Function.getAll (src/server/api/controllers/ProjectPhaseDependenciesController.ts:13:15)
      at Object.<anonymous> (tests/unit/server/controllers/ProjectPhaseDependenciesController.test.ts:87:7)

    console.error
      Error creating dependency: Error: Insert failed
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/controllers/ProjectPhaseDependenciesController.test.ts:149:45)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

      42 |       res.status(201).json(dependency);
      43 |     } catch (error) {
    > 44 |       console.error('Error creating dependency:', error);
         |               ^
      45 |       res.status(500).json({ error: 'Failed to create dependency' });
      46 |     }
      47 |   }

      at Function.create (src/server/api/controllers/ProjectPhaseDependenciesController.ts:44:15)
      at Object.<anonymous> (tests/unit/server/controllers/ProjectPhaseDependenciesController.test.ts:151:7)

PASS server-unit tests/unit/server/controllers/PeopleController.simple.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/controllers/NotificationsController.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 prevent building .env in docker: https://dotenvx.com/prebuild)

      at _log (node_modules/dotenv/lib/main.js:129:11)

PASS server-unit tests/unit/server/services/ProjectPhaseCascadeService.test.ts
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit)

      at _log (node_modules/dotenv/lib/main.js:129:11)

FAIL server-integration tests/integration/services/AuditService.undo.test.ts
  ● Test suite failed to run

    Cannot find module '../../../../src/server/services/audit/index' from 'tests/integration/services/AuditService.undo.test.ts'

      1 | import { describe, test, it, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals';
      2 |
    > 3 | import { AuditService, AuditConfig } from '../../../../src/server/services/audit/index';
        | ^
      4 | import { db as testDb, createTestUser, createTestRole, createTestProject } from '../setup';
      5 |
      6 | describe('AuditService - Undo Functionality', () => {

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (tests/integration/services/AuditService.undo.test.ts:3:1)

PASS client tests/unit/client/components/ProjectPhaseManager.consolidated.test.tsx
FAIL server-unit tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts (5.352 s)
  ● Console

    console.log
      [dotenv@17.1.0] injecting env (19) from .env.test (tip: ⚙️  enable debug logging with { debug: true })

      at _log (node_modules/dotenv/lib/main.js:129:11)

    console.error
      Controller error: Error: Person not found
          at /home/tony/GitHub/Capacinator/src/server/api/controllers/PeopleController.ts:267:15
          at PeopleController.executeQuery (/home/tony/GitHub/Capacinator/src/server/api/controllers/BaseController.ts:34:14)
          at PeopleController.getPersonUtilizationTimeline (/home/tony/GitHub/Capacinator/src/server/api/controllers/PeopleController.ts:259:20)
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:142:7)

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at PeopleController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at PeopleController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at PeopleController.getPersonUtilizationTimeline (src/server/api/controllers/PeopleController.ts:259:20)
      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:142:7)

    console.error
      Controller error: Error: Database error
          at Object.<anonymous> (/home/tony/GitHub/Capacinator/tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:266:53)
          at Promise.finally.completed (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at _runTest (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/home/tony/GitHub/Capacinator/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/home/tony/GitHub/Capacinator/node_modules/jest-runner/build/testWorker.js:494:12)

       6 |
       7 |   protected handleError(error: any, res: Response, message = 'Internal server error') {
    >  8 |     console.error('Controller error:', error);
         |             ^
       9 |     res.status(500).json({
      10 |       error: message,
      11 |       details: process.env.NODE_ENV === 'development' ? error.message : undefined

      at PeopleController.handleError (src/server/api/controllers/BaseController.ts:8:13)
      at PeopleController.executeQuery (src/server/api/controllers/BaseController.ts:36:12)
      at PeopleController.getPersonUtilizationTimeline (src/server/api/controllers/PeopleController.ts:259:20)
      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:269:7)

  ● PeopleController.getPersonUtilizationTimeline › Basic functionality › should calculate utilization timeline correctly

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      55 |
      56 |   describe('Basic functionality', () => {
    > 57 |     test('should calculate utilization timeline correctly', async () => {
         |         ^
      58 |       const mockPerson = {
      59 |         id: 'test-person-id',
      60 |         name: 'John Doe',

      at tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:57:9
      at tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:56:11
      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:12:9)

  ● PeopleController.getPersonUtilizationTimeline › Basic functionality › should return 404 if person not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404
    Received: 500

    Number of calls: 1

      142 |       await controller.getPersonUtilizationTimeline(mockReq as Request, mockRes as Response);
      143 |
    > 144 |       expect(mockRes.status).toHaveBeenCalledWith(404);
          |                              ^
      145 |       expect(mockRes.json).toHaveBeenCalledWith({ error: 'Person not found' });
      146 |     });
      147 |

      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:144:30)

  ● PeopleController.getPersonUtilizationTimeline › Edge cases › should handle person with no assignments

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"personName": "Unassigned Person", "timeline": ArrayContaining [ObjectContaining {"over_allocated": false, "utilization": 0}]}
    Received: {"defaultAvailability": 100, "personName": "Unassigned Person", "timeline": []}

    Number of calls: 1

      194 |       await controller.getPersonUtilizationTimeline(mockReq as Request, mockRes as Response);
      195 |
    > 196 |       expect(mockRes.json).toHaveBeenCalledWith(
          |                            ^
      197 |         expect.objectContaining({
      198 |           personName: 'Unassigned Person',
      199 |           timeline: expect.arrayContaining([

      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:196:28)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Summary of all failing tests
FAIL tests/integration/controllers/AssignmentBusinessRules.test.ts
  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should detect total allocation exceeding 100% during overlapping periods

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should allow assignments when total allocation equals exactly 100%

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Allocation Percentage Validation › should allow assignments in non-overlapping periods even at 100%

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Date Range Overlap Detection › should correctly identify all overlap scenarios

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Date Range Overlap Detection › should handle same-day assignments correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Multi-Assignment Conflict Scenarios › should detect conflicts across multiple overlapping assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Multi-Assignment Conflict Scenarios › should validate assignment exclusion during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should enforce referential integrity for assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should validate assignment date consistency

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Data Integrity Validation › should validate allocation percentage bounds

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

  ● Assignment Business Rules Validation › CRITICAL: Performance and Scalability › should handle conflict detection efficiently with many assignments

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.077', 'Test role for business rules', '01ee7dd4-bd9d-40db-8db6-e48962536fb1', 'Test Business Role', '2025-09-24 20:55:44.077') - table roles has no column named description

      53 |
      54 |     // Insert test role
    > 55 |     await db('roles').insert({
         |     ^
      56 |       id: testData.role_id,
      57 |       name: 'Test Business Role',
      58 |       description: 'Test role for business rules',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentBusinessRules.test.ts:55:5)

FAIL tests/integration/projects-api-simple.test.ts
  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should create a new project

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: 1

      39 |       expect(created.name).toBe('Test Project Integration');
      40 |       expect(created.priority).toBe(1);
    > 41 |       expect(created.include_in_demand).toBe(true);
         |                                         ^
      42 |     });
      43 |
      44 |     test('should update a project', async () => {

      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:41:41)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should create a new project

    SqliteError: delete from `project_phases` where `project_id` = '23ddf597-36b0-44d7-bf95-1220dda3ec5e' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should update a project

    SqliteError: delete from `project_phases` where `project_id` = '207fab30-d06b-4c8d-8f42-a7037cd20a3d' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should retrieve project with related data

    SqliteError: insert into `project_phases` (`created_at`, `end_date`, `id`, `name`, `project_id`, `start_date`, `updated_at`) values ('2025-09-24 20:55:44.131', '2024-03-31', 'b94435d8-82d5-4d60-ad4d-248898c88a2a', 'Design Phase', 'f0ffe730-fa1f-4f2a-9f00-6eacda069d5a', '2024-01-01', '2025-09-24 20:55:44.131') - table project_phases has no column named end_date

      82 |       // Create phases
      83 |       const phaseId = uuidv4();
    > 84 |       await db('project_phases').insert({
         |       ^
      85 |         id: phaseId,
      86 |         project_id: testProjectId,
      87 |         name: 'Design Phase',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:84:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should retrieve project with related data

    SqliteError: delete from `project_phases` where `project_id` = 'f0ffe730-fa1f-4f2a-9f00-6eacda069d5a' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Projects Table Basic Operations › should delete project

    SqliteError: delete from `project_phases` where `project_id` = 'baff9a95-4d06-4398-a98e-8043d30a6bae' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

  ● Projects API Integration Tests - Simple › Complex Project Queries › should calculate project metrics

    SqliteError: delete from `project_phases` where `project_id` = 'baff9a95-4d06-4398-a98e-8043d30a6bae' - no such column: project_id

       9 |     // Clean up test projects
      10 |     if (testProjectId) {
    > 11 |       await db('project_phases').where('project_id', testProjectId).del();
         |       ^
      12 |       await db('project_assignments').where('project_id', testProjectId).del();
      13 |       await db('projects').where('id', testProjectId).del();
      14 |     }

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/projects-api-simple.test.ts:11:7)

FAIL tests/integration/assignment-phase-alignment.test.ts
  ● Assignment Phase Alignment Integration Tests › Phase-Aligned Assignment Creation › should create assignment with computed dates from phase timeline

    ReferenceError: db is not defined

      125 |     it('should create assignment with computed dates from phase timeline', async () => {
      126 |       // Create phase-aligned assignment
    > 127 |       const [assignment] = await db('project_assignments').insert({
          |                            ^
      128 |         id: 'assignment-phase-aligned',
      129 |         project_id: testProjectId,
      130 |         person_id: testPersonId,

      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:127:28)

  ● Assignment Phase Alignment Integration Tests › Phase-Aligned Assignment Creation › should create project-aligned assignment with computed dates from project aspiration

    ReferenceError: db is not defined

      148 |     it('should create project-aligned assignment with computed dates from project aspiration', async () => {
      149 |       // Create project-aligned assignment
    > 150 |       const [assignment] = await db('project_assignments').insert({
          |                            ^
      151 |         id: 'assignment-project-aligned',
      152 |         project_id: testProjectId,
      153 |         person_id: testPersonId,

      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:150:28)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation on Phase Changes › should recalculate phase-aligned assignments when phase dates change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `end_date`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `start_date`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, NULL as `end_date`, 'assignment-analysis-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` union all select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, NULL as `end_date`, 'assignment-development-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` union all select 50 as `allocation_percentage`, 'fixed' as `assignment_date_mode`, '2024-05-31' as `computed_end_date`, '2024-05-01' as `computed_start_date`, '2025-09-24 20:55:44.130' as `created_at`, '2024-05-31' as `end_date`, 'assignment-fixed-dates' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, NULL as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2024-05-01' as `start_date`, '2025-09-24 20:55:44.130' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      170 |     beforeEach(async () => {
      171 |       // Create test assignments
    > 172 |       await testDb('project_assignments').insert([
          |       ^
      173 |         {
      174 |           id: 'assignment-analysis-phase',
      175 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:172:7)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation on Phase Changes › should not affect fixed-date assignments when phases change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `end_date`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `start_date`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, NULL as `end_date`, 'assignment-analysis-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` union all select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, NULL as `end_date`, 'assignment-development-phase' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, NULL as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` union all select 50 as `allocation_percentage`, 'fixed' as `assignment_date_mode`, '2024-05-31' as `computed_end_date`, '2024-05-01' as `computed_start_date`, '2025-09-24 20:55:44.134' as `created_at`, '2024-05-31' as `end_date`, 'assignment-fixed-dates' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, NULL as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2024-05-01' as `start_date`, '2025-09-24 20:55:44.134' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      170 |     beforeEach(async () => {
      171 |       // Create test assignments
    > 172 |       await testDb('project_assignments').insert([
          |       ^
      173 |         {
      174 |           id: 'assignment-analysis-phase',
      175 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:172:7)

  ● Assignment Phase Alignment Integration Tests › Assignment Recalculation with Phase Cascading › should recalculate assignments when phase dependencies cause cascading changes

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `updated_at`) select 100 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.138' as `created_at`, 'assignment-analysis-cascade' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.138' as `updated_at` union all select 50 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.138' as `created_at`, 'assignment-development-cascade' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.138' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      281 |     beforeEach(async () => {
      282 |       // Create phase-aligned assignments for both phases
    > 283 |       await testDb('project_assignments').insert([
          |       ^
      284 |         {
      285 |           id: 'assignment-analysis-cascade',
      286 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:283:7)

  ● Assignment Phase Alignment Integration Tests › Conflict Detection with Dynamic Assignments › should detect conflicts when phase changes cause assignment overlaps

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `phase_id`, `project_id`, `role_id`, `updated_at`) select 75 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-02-29' as `computed_end_date`, '2024-02-01' as `computed_start_date`, '2025-09-24 20:55:44.141' as `created_at`, 'assignment-conflict-1' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '44444444-5555-6666-7777-888888888888' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.141' as `updated_at` union all select 50 as `allocation_percentage`, 'phase' as `assignment_date_mode`, '2024-04-30' as `computed_end_date`, '2024-03-01' as `computed_start_date`, '2025-09-24 20:55:44.141' as `created_at`, 'assignment-conflict-2' as `id`, '22222222-3333-4444-5555-666666666666' as `person_id`, '55555555-6666-7777-8888-999999999999' as `phase_id`, '11111111-2222-3333-4444-555555555555' as `project_id`, '33333333-4444-5555-6666-777777777777' as `role_id`, '2025-09-24 20:55:44.141' as `updated_at` - NOT NULL constraint failed: project_assignments.start_date

      360 |     it('should detect conflicts when phase changes cause assignment overlaps', async () => {
      361 |       // Create two overlapping phase-aligned assignments for the same person
    > 362 |       await testDb('project_assignments').insert([
          |       ^
      363 |         {
      364 |           id: 'assignment-conflict-1',
      365 |           project_id: testProjectId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:362:7)

  ● Assignment Phase Alignment Integration Tests › Project-Aligned Assignment Recalculation › should recalculate project-aligned assignments when project aspiration dates change

    SqliteError: insert into `project_assignments` (`allocation_percentage`, `assignment_date_mode`, `computed_end_date`, `computed_start_date`, `created_at`, `id`, `person_id`, `project_id`, `role_id`, `updated_at`) values (25, 'project', '2024-12-31', '2024-01-01', '2025-09-24 20:55:44.145', 'assignment-project-aligned', '22222222-3333-4444-5555-666666666666', '11111111-2222-3333-4444-555555555555', '33333333-4444-5555-6666-777777777777', '2025-09-24 20:55:44.145') - NOT NULL constraint failed: project_assignments.start_date

      415 |   describe('Project-Aligned Assignment Recalculation', () => {
      416 |     beforeEach(async () => {
    > 417 |       await testDb('project_assignments').insert({
          |       ^
      418 |         id: 'assignment-project-aligned',
      419 |         project_id: testProjectId,
      420 |         person_id: testPersonId,

      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:44:38)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/assignment-phase-alignment.test.ts:417:7)

FAIL tests/integration/__tests__/database/scenario-operations.test.ts
  ● Scenario Database Operations › Scenario CRUD Operations › should create scenario with proper constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.071Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.071Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario CRUD Operations › should enforce foreign key constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.102Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.102Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario CRUD Operations › should cascade delete scenario data

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.105Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.105Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should enforce unique constraint on scenario assignments

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.108Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.108Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should allow same assignment in different scenarios

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.116Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.116Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignment Operations › should validate assignment date modes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.121Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.121Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Scenario Assignments View › should compute dates correctly for different assignment modes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.125Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.125Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should maintain referential integrity on assignment deletes

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.127Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.127Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should handle scenario hierarchy constraints

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.130Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.130Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Data Integrity and Constraints › should validate allocation percentages

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.134Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.134Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

  ● Scenario Database Operations › Performance and Indexing › should efficiently query scenario assignments

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.137Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.137Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/database/scenario-operations.test.ts:42:23)

FAIL tests/integration/phase-dependencies-performance.test.ts
  ● Phase Dependencies Performance Tests › Large Project Performance › should handle project with 50 phases efficiently

    ReferenceError: request is not defined

      78 |       const startTime = Date.now();
      79 |       
    > 80 |       const response = await request(app)
         |                        ^
      81 |         .get('/api/project-phases')
      82 |         .query({ project_id: testProjectId })
      83 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:80:24)

  ● Phase Dependencies Performance Tests › Large Project Performance › should handle complex dependency chain efficiently

    Invalid date format, expected YYYY-MM-DD

      48 |     
      49 |     const [year, month, day] = dateString.split('-').map(Number);
    > 50 |     if (!year || !month || !day) throw new Error('Invalid date format, expected YYYY-MM-DD');
         |                                        ^
      51 |     
      52 |     // Create date in local timezone to represent the business date
      53 |     return new Date(year, month - 1, day);

      at ProjectPhaseCascadeService.parseDateSafe (src/server/services/ProjectPhaseCascadeService.ts:50:40)
      at ProjectPhaseCascadeService.validatePhaseChange (src/server/services/ProjectPhaseCascadeService.ts:403:39)
      at ProjectPhaseCascadeService.calculateCascade (src/server/services/ProjectPhaseCascadeService.ts:78:41)
      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:155:22)

  ● Phase Dependencies Performance Tests › Large Project Performance › should handle high dependency density efficiently

    ReferenceError: request is not defined

      228 |       const startTime = Date.now();
      229 |       
    > 230 |       const response = await request(app)
          |                        ^
      231 |         .get('/api/project-phase-dependencies')
      232 |         .query({ project_id: testProjectId })
      233 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:230:24)

  ● Phase Dependencies Performance Tests › Memory Usage › should handle large datasets without excessive memory usage

    ReferenceError: request is not defined

      364 |
      365 |       // Make API call
    > 366 |       await request(app)
          |       ^
      367 |         .get('/api/project-phases')
      368 |         .query({ project_id: testProjectId })
      369 |         .expect(200);

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:366:7)

  ● Phase Dependencies Performance Tests › Concurrent Operations › should handle multiple cascade calculations concurrently

    ReferenceError: request is not defined

      441 |         };
      442 |
    > 443 |         cascadePromises.push(
          |                         ^
      444 |           request(app)
      445 |             .post('/api/project-phase-dependencies/calculate-cascade')
      446 |             .send(cascadeData)

      at Object.<anonymous> (tests/integration/phase-dependencies-performance.test.ts:443:25)

FAIL tests/unit/server/controllers/ProjectsController.test.ts
  ● ProjectsController › getAll › should retrieve all projects with default ordering

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: [{"id": "1", "name": "Project A", "status": "active"}, {"id": "2", "name": "Project B", "status": "completed"}]

    Number of calls: 0

      82 |       await controller.getAll(req as Request, res as Response);
      83 |
    > 84 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
         |                        ^
      85 |       expect(mockQuery.select).toHaveBeenCalledWith('*');
      86 |       expect(mockQuery.orderBy).toHaveBeenCalledWith('created_at', 'desc');
      87 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:84:24)

  ● ProjectsController › getAll › should handle database errors gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 500

    Number of calls: 0

      94 |       await controller.getAll(req as Request, res as Response);
      95 |
    > 96 |       expect(res.status).toHaveBeenCalledWith(500);
         |                          ^
      97 |       expect(res.json).toHaveBeenCalledWith({ 
      98 |         error: 'Failed to fetch projects',
      99 |         details: 'Database connection failed'

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:96:26)

  ● ProjectsController › getAll › should apply filters when provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "status", "active"

    Number of calls: 0

      116 |       await controller.getAll(req as Request, res as Response);
      117 |
    > 118 |       expect(mockQuery.where).toHaveBeenCalledWith('status', 'active');
          |                               ^
      119 |       expect(mockQuery.where).toHaveBeenCalledWith('project_type_id', 'type-123');
      120 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
      121 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:118:31)

  ● ProjectsController › getAll › should handle pagination parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 10

    Number of calls: 0

      134 |       await controller.getAll(req as Request, res as Response);
      135 |
    > 136 |       expect(mockQuery.limit).toHaveBeenCalledWith(10);
          |                               ^
      137 |       expect(mockQuery.offset).toHaveBeenCalledWith(20);
      138 |       expect(res.json).toHaveBeenCalledWith(mockProjects);
      139 |     });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:136:31)

  ● ProjectsController › getById › should retrieve project by ID with related data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"assignments": [{"id": "assign-1", "person_id": "person-1", "project_id": "project-123"}], "id": "project-123", "name": "Test Project", "phases": [{"id": "phase-1", "name": "Phase 1", "project_id": "project-123"}], "planners": [], "project_type_id": "type-123"}

    Number of calls: 0

      172 |       await controller.getById(req as Request, res as Response);
      173 |
    > 174 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      175 |         ...mockProject,
      176 |         phases: mockPhases,
      177 |         assignments: mockAssignments,

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:174:24)

  ● ProjectsController › getById › should return 404 when project not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      188 |       await controller.getById(req as Request, res as Response);
      189 |
    > 190 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      191 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      192 |     });
      193 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:190:26)

  ● ProjectsController › create › should create new project with validation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 201

    Number of calls: 0

      230 |       await controller.create(req as Request, res as Response);
      231 |
    > 232 |       expect(res.status).toHaveBeenCalledWith(201);
          |                          ^
      233 |       expect(res.json).toHaveBeenCalledWith(createdProject);
      234 |     });
      235 |

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:232:26)

  ● ProjectsController › create › should reject invalid project type

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      245 |       await controller.create(req as Request, res as Response);
      246 |
    > 247 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      248 |       expect(res.json).toHaveBeenCalledWith({ error: 'Invalid project type' });
      249 |     });
      250 |

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:247:26)

  ● ProjectsController › create › should reject missing required fields

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      254 |       await controller.create(req as Request, res as Response);
      255 |
    > 256 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      257 |       expect(res.json).toHaveBeenCalledWith({ 
      258 |         error: 'Name and project type are required' 
      259 |       });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:256:26)

  ● ProjectsController › update › should update project with validation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"id": "project-123", "name": "Updated Project Name", "project_sub_type_id": "new-subtype-456", "project_type_id": "type-123", "updated_at": 2025-09-25T00:55:44.190Z}

    Number of calls: 0

      301 |       await controller.update(req as Request, res as Response);
      302 |
    > 303 |       expect(res.json).toHaveBeenCalledWith(updatedProject);
          |                        ^
      304 |     });
      305 |
      306 |     test('should return 404 when updating non-existent project', async () => {

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:303:24)

  ● ProjectsController › update › should return 404 when updating non-existent project

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      313 |       await controller.update(req as Request, res as Response);
      314 |
    > 315 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      316 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      317 |     });
      318 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:315:26)

  ● ProjectsController › delete › should delete project successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"message": "Project deleted successfully"}

    Number of calls: 0

      328 |       await controller.delete(req as Request, res as Response);
      329 |
    > 330 |       expect(res.json).toHaveBeenCalledWith({ 
          |                        ^
      331 |         message: 'Project deleted successfully' 
      332 |       });
      333 |       expect(mockQuery.where).toHaveBeenCalledWith('id', 'project-to-delete');

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:330:24)

  ● ProjectsController › delete › should return 404 when deleting non-existent project

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404

    Number of calls: 0

      344 |       await controller.delete(req as Request, res as Response);
      345 |
    > 346 |       expect(res.status).toHaveBeenCalledWith(404);
          |                          ^
      347 |       expect(res.json).toHaveBeenCalledWith({ error: 'Project not found' });
      348 |     });
      349 |   });

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:346:26)

  ● ProjectsController › Complex Queries › should handle project with all related entities

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"assignments": [{"allocation_percentage": 100, "id": "assign-1", "person_id": "person-1", "role_id": "role-1"}], "budget": 1000000, "id": "complex-project", "location_id": "loc-456", "name": "Complex Project", "phases": [{"end_date": "2024-03-01", "id": "phase-1", "name": "Design Phase", "start_date": "2024-01-01"}, {"end_date": "2024-09-01", "id": "phase-2", "name": "Development Phase", "start_date": "2024-03-01"}], "planners": [{"user_id": "user-1", "user_name": "Project Manager"}], "project_type_id": "type-123", "status": "active"}

    Number of calls: 0

      407 |       await controller.getById(req as Request, res as Response);
      408 |
    > 409 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      410 |         ...mockProject,
      411 |         phases: mockPhases,
      412 |         assignments: mockAssignments,

      at Object.<anonymous> (tests/unit/server/controllers/ProjectsController.test.ts:409:24)

FAIL tests/integration/__tests__/scenario-conflict-detection.test.ts
  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect assignment conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.100Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.100Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect phase timeline conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.136Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.136Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should detect project detail conflicts

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.139Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.139Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should not detect conflicts for identical data

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.144Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.144Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Conflict Detection › should handle multiple conflicts across different types

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.147Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.147Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should maintain data integrity during successful merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.151Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.151Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should rollback completely on merge failure

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.155Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.155Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should handle concurrent modifications safely

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.158Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.158Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should preserve foreign key relationships during merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.161Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.161Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Merge Operations - Database Integrity › should handle complex assignment date mode scenarios

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.164Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.164Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should handle empty scenarios gracefully

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.167Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.167Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should handle null and undefined values in conflict detection

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.170Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.170Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

  ● Scenario Conflict Detection and Merge Operations › Edge Cases and Error Conditions › should validate scenario state before merge

    SqliteError: insert into `people` (`created_at`, `email`, `first_name`, `id`, `is_active`, `last_name`, `updated_at`, `worker_type`) values ('2025-09-25T00:55:44.173Z', 'test@example.com', 'Test', 'test-user-1', true, 'User 1', '2025-09-25T00:55:44.173Z', 'employee') - table people has no column named first_name

      107 |   };
      108 |
    > 109 |   await testDb('people').insert(user);
          |   ^
      110 |   return user;
      111 | }
      112 |

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at createTestUser (tests/integration/setup.ts:109:3)
      at Object.<anonymous> (tests/integration/__tests__/scenario-conflict-detection.test.ts:49:23)

FAIL tests/integration/utilization-modals-api.test.ts
  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should retrieve person assignments for reduce load modal

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should successfully delete assignment and update utilization

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Reduce Load Modal Backend Operations › should calculate removal scores correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should retrieve available projects for assignment

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should successfully create new assignment

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should prevent over-allocation during assignment creation

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should calculate match scores for project recommendations

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Add Projects Modal Backend Operations › should calculate realistic estimated hours

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Utilization Report Integration › should reflect assignment changes in utilization report

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Utilization Report Integration › should handle concurrent assignment operations

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should maintain referential integrity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should validate allocation percentage bounds

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

  ● Utilization Modals API Integration › Data Consistency and Validation › should handle date validation correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.170', 'Test role for modal integration tests', 'ddbc2f0e-01eb-4327-ae42-82da516e633d', 'Test Developer', '2025-09-24 20:55:44.170') - table roles has no column named description

      46 |
      47 |     // Insert test role
    > 48 |     await testDb('roles').insert({
         |     ^
      49 |       id: testData.role_id,
      50 |       name: 'Test Developer',
      51 |       description: 'Test role for modal integration tests',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/utilization-modals-api.test.ts:48:5)

FAIL tests/integration/controllers/AssignmentsController.integration.test.ts
  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should prevent assignments that exceed 100% capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should allow assignments within available capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should handle exact 100% allocation correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Allocation Percentage Validation › should prevent even 1% over capacity

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Date Range Validation › should detect overlapping date ranges correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Date Range Validation › should handle same-day assignments correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Person Availability Integration › should respect person availability overrides

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Person Availability Integration › should handle zero availability correctly

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Assignment Exclusion › should exclude current assignment from conflict checking during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Critical Business Logic: Assignment Exclusion › should still detect conflicts with other assignments during updates

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle invalid person ID gracefully

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle invalid date formats gracefully

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle negative allocation percentages

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Edge Cases and Error Conditions › should handle very high allocation percentages

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Real-world Scenarios › should handle complex multi-project allocation scenario

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)

  ● AssignmentsController Integration Tests › Real-world Scenarios › should validate assignment timeline gaps and overlaps

    SqliteError: insert into `roles` (`created_at`, `description`, `id`, `name`, `updated_at`) values ('2025-09-24 20:55:44.220', 'Test role for assignments', 'e799074f-39b7-4d4d-9cfa-22fe32378a3e', 'Test Role', '2025-09-24 20:55:44.220') - table roles has no column named description

      56 |
      57 |     // Insert test role
    > 58 |     await db('roles').insert({
         |     ^
      59 |       id: testData.role_id,
      60 |       name: 'Test Role',
      61 |       description: 'Test role for assignments',

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:58:5)


  ● Test suite failed to run

    SqliteError: delete from `person_roles` where `person_id` = 'd63724ef-f751-4542-8418-987de14c6d65' - no such table: person_roles

      89 |     // Clean up test data
      90 |     await db('person_availability_overrides').where('person_id', testData.person_id).del();
    > 91 |     await db('person_roles').where('person_id', testData.person_id).del();
         |     ^
      92 |     await db('project_assignments').where('person_id', testData.person_id).del();
      93 |     await db('roles').where('id', testData.role_id).del();
      94 |     await db('projects').whereIn('id', [testData.project1_id, testData.project2_id]).del();

      at Database.prepare (node_modules/better-sqlite3/lib/methods/wrappers.js:5:21)
      at Client_BetterSQLite3._query (node_modules/knex/lib/dialects/better-sqlite3/index.js:35:34)
      at executeQuery (node_modules/knex/lib/execution/internal/query-executioner.js:37:17)
      at Client_BetterSQLite3.query (node_modules/knex/lib/client.js:154:12)
      at Runner.query (node_modules/knex/lib/execution/runner.js:141:36)
      at ensureConnectionCallback (node_modules/knex/lib/execution/internal/ensure-connection-callback.js:13:17)
      at Runner.ensureConnection (node_modules/knex/lib/execution/runner.js:318:20)
      at Runner.run (node_modules/knex/lib/execution/runner.js:30:19)
      at Object.<anonymous> (tests/integration/controllers/AssignmentsController.integration.test.ts:91:5)

FAIL tests/integration/phase-dependencies-api.test.ts
  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should retrieve dependencies for a project

    expected 200 "OK", got 500 "Internal Server Error"

      126 |         .get('/api/project-phase-dependencies')
      127 |         .query({ project_id: testProjectId })
    > 128 |         .expect(200);
          |          ^
      129 |
      130 |       expect(response.body.data).toHaveLength(1);
      131 |       expect(response.body.data[0]).toMatchObject({

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:128:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should support pagination

    expected 200 "OK", got 500 "Internal Server Error"

      159 |           limit: 1
      160 |         })
    > 161 |         .expect(200);
          |          ^
      162 |
      163 |       expect(response.body.data).toHaveLength(1);
      164 |       expect(response.body.pagination).toMatchObject({

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:161:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies › should return empty array for project with no dependencies

    expected 200 "OK", got 500 "Internal Server Error"

      184 |         .get('/api/project-phase-dependencies')
      185 |         .query({ project_id: project2.id })
    > 186 |         .expect(200);
          |          ^
      187 |
      188 |       expect(response.body.data).toHaveLength(0);
      189 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:186:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › GET /api/project-phase-dependencies/:id › should retrieve a specific dependency

    expected 200 "OK", got 500 "Internal Server Error"

      211 |       const response = await request
      212 |         .get(`/api/project-phase-dependencies/${testDependencyId}`)
    > 213 |         .expect(200);
          |          ^
      214 |
      215 |       expect(response.body.data).toMatchObject({
      216 |         id: testDependencyId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:213:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies › should create a new dependency

    expected 200 "OK", got 500 "Internal Server Error"

      242 |         .post('/api/project-phase-dependencies')
      243 |         .send(dependencyData)
    > 244 |         .expect(200);
          |          ^
      245 |
      246 |       expect(response.body.data).toMatchObject({
      247 |         project_id: testProjectId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:244:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › PUT /api/project-phase-dependencies/:id › should update dependency properties

    expected 200 "OK", got 500 "Internal Server Error"

      338 |         .put(`/api/project-phase-dependencies/${testDependencyId}`)
      339 |         .send(updateData)
    > 340 |         .expect(200);
          |          ^
      341 |
      342 |       expect(response.body.data).toMatchObject({
      343 |         id: testDependencyId,

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:340:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › DELETE /api/project-phase-dependencies/:id › should delete dependency

    expected 200 "OK", got 500 "Internal Server Error"

      373 |       const response = await request
      374 |         .delete(`/api/project-phase-dependencies/${testDependencyId}`)
    > 375 |         .expect(200);
          |          ^
      376 |
      377 |       expect(response.body.message).toBe('Dependency deleted successfully');
      378 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:375:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/calculate-cascade › should calculate cascade effects

    expected 200 "OK", got 404 "Not Found"

      424 |         .post('/api/project-phase-dependencies/calculate-cascade')
      425 |         .send(cascadeData)
    > 426 |         .expect(200);
          |          ^
      427 |
      428 |       expect(response.body.data).toHaveProperty('affected_phases');
      429 |       expect(response.body.data).toHaveProperty('cascade_count');

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:426:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/calculate-cascade › should validate required fields

    expected 500 "Internal Server Error", got 404 "Not Found"

      445 |         .post('/api/project-phase-dependencies/calculate-cascade')
      446 |         .send(incompleteData)
    > 447 |         .expect(500);
          |          ^
      448 |     });
      449 |   });
      450 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:447:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Phase Dependencies API Integration Tests › POST /api/project-phase-dependencies/apply-cascade › should apply cascade changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      496 |       }
      497 |       
    > 498 |       expect(response.status).toBe(200);
          |                               ^
      499 |
      500 |       expect(response.body.message).toBe('Cascade changes applied successfully');
      501 |

      at Object.<anonymous> (tests/integration/phase-dependencies-api.test.ts:498:31)

FAIL tests/integration/controllers/ScenariosController.edge-cases.test.ts
  ● ScenariosController - Complex Edge Cases › Multi-Level Hierarchy Edge Cases › should prevent circular dependencies in scenario hierarchy

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      181 |         });
      182 |
    > 183 |       expect(parentResponse.status).toBe(201);
          |                                     ^
      184 |       const parentId = parentResponse.body.id;
      185 |
      186 |       // Create child scenario

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:183:37)

  ● ScenariosController - Complex Edge Cases › Multi-Level Hierarchy Edge Cases › should handle deep hierarchy performance efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      254 |           });
      255 |
    > 256 |         expect(response.status).toBe(201);
          |                                 ^
      257 |         currentParentId = response.body.id;
      258 |       }
      259 |

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:256:33)

  ● ScenariosController - Complex Edge Cases › Complex Conflict Resolution Edge Cases › should handle cascading conflicts with multiple assignment changes

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      366 |         });
      367 |
    > 368 |       expect(mergeResponse.status).toBe(200);
          |                                    ^
      369 |       
      370 |       if (!mergeResponse.body.success) {
      371 |         expect(mergeResponse.body.conflicts).toBeGreaterThan(0);

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:368:36)

  ● ScenariosController - Complex Edge Cases › Complex Conflict Resolution Edge Cases › should handle over-allocation conflicts during merge

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      437 |
      438 |       // System should handle this gracefully
    > 439 |       expect(mergeResponse.status).toBe(200);
          |                                    ^
      440 |       console.log('✅ Over-allocation scenario handled during merge');
      441 |     });
      442 |   });

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:439:36)

  ● ScenariosController - Complex Edge Cases › Concurrent Operation Edge Cases › should handle concurrent merge attempts gracefully

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

      486 |
      487 |       console.log(`✅ Concurrent merges: ${successful.length} succeeded, ${failed.length} failed gracefully`);
    > 488 |       expect(successful.length).toBeGreaterThanOrEqual(1);
          |                                 ^
      489 |     });
      490 |
      491 |     test('should handle concurrent scenario creation with same names', async () => {

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:488:33)

  ● ScenariosController - Complex Edge Cases › Concurrent Operation Edge Cases › should handle concurrent scenario creation with same names

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      507 |       const successful = results.filter(r => r.status === 'fulfilled' && r.value.status === 201);
      508 |       console.log(`✅ Created ${successful.length} scenarios with duplicate names`);
    > 509 |       expect(successful.length).toBe(5);
          |                                 ^
      510 |     });
      511 |   });
      512 |

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:509:33)

  ● ScenariosController - Complex Edge Cases › Data Integrity and Validation Edge Cases › should validate assignment percentage bounds strictly

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      540 |         // Should reject invalid percentages
      541 |         if (percentage <= 0 || percentage > 100) {
    > 542 |           expect(response.status).toBe(400);
          |                                   ^
      543 |           console.log(`✅ Correctly rejected allocation percentage: ${percentage}%`);
      544 |         }
      545 |       }

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:542:35)

  ● ScenariosController - Complex Edge Cases › Performance and Scalability Edge Cases › should handle large comparison datasets efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      680 |         .get(`/api/scenarios/${scenario1Id}/compare?compare_to=${scenario2Id}`);
      681 |
    > 682 |       expect(compareResponse.status).toBe(200);
          |                                      ^
      683 |       const compareTime = Date.now() - compareStartTime;
      684 |       console.log(`Compared ${assignmentCount * 2} assignments in ${compareTime}ms`);
      685 |       expect(compareTime).toBeLessThan(5000); // Should complete within 5 seconds

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:682:38)

  ● ScenariosController - Complex Edge Cases › Error Recovery Edge Cases › should rollback partial merge failures correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      784 |       const finalChildState = await supertest(app).get(`/api/scenarios/${childId}`);
      785 |
    > 786 |       expect(finalParentState.status).toBe(200);
          |                                       ^
      787 |       expect(finalChildState.status).toBe(200);
      788 |       console.log('✅ System state remained consistent after merge operation');
      789 |     });

      at Object.<anonymous> (tests/integration/controllers/ScenariosController.edge-cases.test.ts:786:39)

FAIL tests/integration/services/AuditService.undo.test.ts
  ● Test suite failed to run

    Cannot find module '../../../../src/server/services/audit/index' from 'tests/integration/services/AuditService.undo.test.ts'

      1 | import { describe, test, it, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals';
      2 |
    > 3 | import { AuditService, AuditConfig } from '../../../../src/server/services/audit/index';
        | ^
      4 | import { db as testDb, createTestUser, createTestRole, createTestProject } from '../setup';
      5 |
      6 | describe('AuditService - Undo Functionality', () => {

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (tests/integration/services/AuditService.undo.test.ts:3:1)

FAIL tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts (5.352 s)
  ● PeopleController.getPersonUtilizationTimeline › Basic functionality › should calculate utilization timeline correctly

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      55 |
      56 |   describe('Basic functionality', () => {
    > 57 |     test('should calculate utilization timeline correctly', async () => {
         |         ^
      58 |       const mockPerson = {
      59 |         id: 'test-person-id',
      60 |         name: 'John Doe',

      at tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:57:9
      at tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:56:11
      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:12:9)

  ● PeopleController.getPersonUtilizationTimeline › Basic functionality › should return 404 if person not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 404
    Received: 500

    Number of calls: 1

      142 |       await controller.getPersonUtilizationTimeline(mockReq as Request, mockRes as Response);
      143 |
    > 144 |       expect(mockRes.status).toHaveBeenCalledWith(404);
          |                              ^
      145 |       expect(mockRes.json).toHaveBeenCalledWith({ error: 'Person not found' });
      146 |     });
      147 |

      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:144:30)

  ● PeopleController.getPersonUtilizationTimeline › Edge cases › should handle person with no assignments

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"personName": "Unassigned Person", "timeline": ArrayContaining [ObjectContaining {"over_allocated": false, "utilization": 0}]}
    Received: {"defaultAvailability": 100, "personName": "Unassigned Person", "timeline": []}

    Number of calls: 1

      194 |       await controller.getPersonUtilizationTimeline(mockReq as Request, mockRes as Response);
      195 |
    > 196 |       expect(mockRes.json).toHaveBeenCalledWith(
          |                            ^
      197 |         expect.objectContaining({
      198 |           personName: 'Unassigned Person',
      199 |           timeline: expect.arrayContaining([

      at Object.<anonymous> (tests/unit/server/controllers/PeopleController.utilization-timeline.test.ts:196:28)


Test Suites: 13 failed, 1 skipped, 38 passed, 51 of 52 total
Tests:       117 failed, 14 skipped, 696 passed, 827 total
Snapshots:   0 total
Time:        6.552 s
Ran all test suites matching test in 3 projects.
