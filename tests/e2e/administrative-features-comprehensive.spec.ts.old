import { test, expect } from './fixtures';

test.describe('Administrative Features Comprehensive Tests', () => {

  test.describe('Administrative Dashboard', () => {
    test('should display administrative overview dashboard', async ({ page }) => {
      // Navigate to settings/admin area
      await helpers.navigateViaSidebar('Settings');
      await helpers.waitForPageContent();

      // Look for administrative dashboard elements
      const adminSections = page.locator('text=/Settings|Administration|System|Configuration/i');
      expect(await adminSections.count()).toBeGreaterThan(0);

      // Check for system metrics
      const systemMetrics = page.locator('text=/users|roles|permissions|projects|people/i');
      if (await systemMetrics.count() > 0) {
        console.log('✅ Administrative dashboard with system metrics found');
      }

      // Check for admin navigation tabs
      const adminTabs = page.locator('[role="tab"], .tab, button[data-tab]');
      const tabCount = await adminTabs.count();
      
      if (tabCount > 0) {
        console.log(`✅ Found ${tabCount} administrative sections`);
        
        // Test tab navigation
        for (let i = 0; i < Math.min(tabCount, 5); i++) {
          await adminTabs.nth(i).click();
          await page.waitForTimeout(500);
          
          // Verify tab content loads
          const tabContent = page.locator('.tab-content, [role="tabpanel"], .settings-content');
          expect(await tabContent.count()).toBeGreaterThan(0);
        }
      }
    });

    test('should provide quick access to admin functions', async ({ page }) => {
      await helpers.navigateViaSidebar('Settings');
      await helpers.waitForPageContent();

      // Check for quick action buttons or links
      const quickActions = [
        'User Management',
        'System Settings', 
        'Email Notifications',
        'User Permissions',
        'Import Settings',
        'Audit Log'
      ];

      let foundActions = 0;
      for (const action of quickActions) {
        const actionElement = page.locator(`text=${action}, button:has-text("${action}"), a:has-text("${action}")`);
        if (await actionElement.count() > 0) {
          foundActions++;
          console.log(`✅ Quick access to ${action} available`);
        }
      }

      expect(foundActions).toBeGreaterThan(2);
      console.log(`✅ Administrative quick access menu with ${foundActions} functions`);
    });

    test('should display system health status', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for system health indicators
      const healthIndicators = page.locator('text=/health|status|online|offline|error/i, .health-indicator, .status-indicator');
      
      if (await healthIndicators.count() > 0) {
        console.log('✅ System health status indicators found');
        
        // Check for specific health metrics
        const healthMetrics = page.locator('text=/database|api|email|backup/i');
        if (await healthMetrics.count() > 0) {
          console.log('✅ Detailed health metrics displayed');
        }
      } else {
        // Check for alternative health display
        const systemInfo = page.locator('text=/version|uptime|last backup|users online/i');
        if (await systemInfo.count() > 0) {
          console.log('✅ System information available as health alternative');
        }
      }
    });
  });

  test.describe('Advanced User Management Workflows', () => {
    test('should support user creation workflow', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to user permissions/management
      const userMgmtTab = page.locator('button:has-text("User Permissions"), [data-tab="user-permissions"]');
      if (await userMgmtTab.count() > 0) {
        await userMgmtTab.click();
        await page.waitForTimeout(1000);

        // Look for add user button
        const addUserButton = page.locator('button:has-text("Add User"), button:has-text("Create User"), button:has-text("New User")');
        
        if (await addUserButton.count() > 0) {
          await addUserButton.click();
          await page.waitForTimeout(500);

          // Fill user creation form
          const userForm = page.locator('form, .user-form');
          if (await userForm.count() > 0) {
            // Test user form fields
            const nameField = page.locator('input[name="name"], input[placeholder*="name"]');
            const emailField = page.locator('input[name="email"], input[type="email"]');
            const roleField = page.locator('select[name="role"], select[name="role_id"]');

            if (await nameField.count() > 0) {
              await nameField.fill('Test Admin User');
            }
            if (await emailField.count() > 0) {
              await emailField.fill('testadmin@example.com');
            }
            if (await roleField.count() > 0 && await roleField.locator('option').count() > 1) {
              await roleField.selectOption({ index: 1 });
            }

            console.log('✅ User creation form available and functional');
          }
        } else {
          console.log('ℹ️ User creation form not found - may be view-only interface');
        }
      }
    });

    test('should support role assignment and modification', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to user permissions
      const userPermTab = page.locator('button:has-text("User Permissions"), [data-tab="user-permissions"]');
      if (await userPermTab.count() > 0) {
        await userPermTab.click();
        await page.waitForTimeout(1000);

        // Look for existing users table
        const usersTable = page.locator('table, .users-list, .permissions-table');
        if (await usersTable.count() > 0) {
          // Check for role modification buttons
          const editButtons = page.locator('button:has-text("Edit"), button[aria-label*="edit"], .edit-button');
          
          if (await editButtons.count() > 0) {
            await editButtons.first().click();
            await page.waitForTimeout(500);

            // Check for role selection
            const roleSelect = page.locator('select[name="role"], select[name="role_id"]');
            if (await roleSelect.count() > 0) {
              const roleOptions = await roleSelect.locator('option').count();
              expect(roleOptions).toBeGreaterThan(1);
              console.log(`✅ Role modification with ${roleOptions} role options`);
            }

            // Check for individual permission overrides
            const permissionCheckboxes = page.locator('input[type="checkbox"]');
            if (await permissionCheckboxes.count() > 0) {
              console.log('✅ Individual permission override capabilities');
            }
          }
        }

        // Check for roles and permissions display
        const rolesDisplay = page.locator('text=/System Administrator|Project Manager|User|Admin/i');
        if (await rolesDisplay.count() > 0) {
          console.log('✅ User roles and permissions displayed');
        }
      }
    });

    test('should handle permission override management', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to user permissions
      const userPermTab = page.locator('button:has-text("User Permissions")');
      if (await userPermTab.count() > 0) {
        await userPermTab.click();
        await page.waitForTimeout(1000);

        // Look for permission override interface
        const overrideSection = page.locator('text=/override|exception|custom permission/i');
        
        if (await overrideSection.count() > 0) {
          console.log('✅ Permission override interface found');
          
          // Test permission modification
          const permissionToggles = page.locator('input[type="checkbox"]:not(:disabled)');
          if (await permissionToggles.count() > 0) {
            // Toggle a permission
            await permissionToggles.first().click();
            await page.waitForTimeout(500);
            
            // Look for reason/justification field
            const reasonField = page.locator('textarea[name="reason"], input[name="justification"]');
            if (await reasonField.count() > 0) {
              await reasonField.fill('Testing permission override functionality');
              console.log('✅ Permission override with reason tracking');
            }
          }
        }

        // Check for permission categories
        const permissionCategories = page.locator('text=/People|Projects|System|Import|Export/i');
        const categoryCount = await permissionCategories.count();
        if (categoryCount > 0) {
          console.log(`✅ Permission system with ${categoryCount} categories`);
        }
      }
    });

    test('should provide user status management', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to user management area
      const userMgmtSection = page.locator('button:has-text("User Permissions")');
      if (await userMgmtSection.count() > 0) {
        await userMgmtSection.click();
        await page.waitForTimeout(1000);

        // Look for user status controls
        const statusControls = page.locator('button:has-text("Activate"), button:has-text("Deactivate"), select[name="status"]');
        
        if (await statusControls.count() > 0) {
          console.log('✅ User status management controls available');
          
          // Check for status indicators
          const statusIndicators = page.locator('text=/active|inactive|suspended|pending/i, .status-badge');
          if (await statusIndicators.count() > 0) {
            console.log('✅ User status indicators displayed');
          }
        }

        // Test bulk user operations
        const bulkActions = page.locator('button:has-text("Bulk"), button:has-text("Select All"), input[type="checkbox"]');
        if (await bulkActions.count() > 0) {
          console.log('✅ Bulk user operation capabilities available');
        }
      }
    });
  });

  test.describe('System Configuration Deep Testing', () => {
    test('should validate advanced system settings', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to system settings
      const systemTab = page.locator('button:has-text("System Settings"), [data-tab="system"]');
      if (await systemTab.count() > 0) {
        await systemTab.click();
        await page.waitForTimeout(1000);

        // Test work hours validation
        const workHoursInput = page.locator('input[name="defaultWorkHoursPerWeek"]');
        if (await workHoursInput.count() > 0) {
          // Test invalid value
          await workHoursInput.fill('100');
          await page.keyboard.press('Tab');
          
          // Look for validation message
          const validationMsg = page.locator('text=/must be between|invalid|maximum/i, .text-destructive');
          if (await validationMsg.count() > 0) {
            console.log('✅ Work hours validation working');
          }
          
          // Set valid value
          await workHoursInput.fill('40');
        }

        // Test vacation days validation
        const vacationInput = page.locator('input[name="defaultVacationDaysPerYear"]');
        if (await vacationInput.count() > 0) {
          await vacationInput.fill('500'); // Invalid
          await page.keyboard.press('Tab');
          
          const vacationValidation = page.locator('text=/maximum|invalid/i');
          if (await vacationValidation.count() > 0) {
            console.log('✅ Vacation days validation working');
          }
          
          await vacationInput.fill('20'); // Valid
        }

        // Test fiscal year settings
        const fiscalYearSelect = page.locator('select[name="fiscalYearStartMonth"]');
        if (await fiscalYearSelect.count() > 0) {
          const monthOptions = await fiscalYearSelect.locator('option').count();
          expect(monthOptions).toBeGreaterThanOrEqual(12);
          console.log('✅ Fiscal year configuration available');
        }
      }
    });

    test('should test configuration dependency validation', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Test allocation settings dependencies
      const systemTab = page.locator('button:has-text("System Settings")');
      if (await systemTab.count() > 0) {
        await systemTab.click();
        await page.waitForTimeout(1000);

        // Test over-allocation settings
        const overAllocationCheckbox = page.locator('input[name="allowOverAllocation"]');
        const maxOverAllocationInput = page.locator('input[name="maxOverAllocationPercentage"]');
        
        if (await overAllocationCheckbox.count() > 0 && await maxOverAllocationInput.count() > 0) {
          // Disable over-allocation
          await overAllocationCheckbox.uncheck();
          
          // Check if max percentage input is disabled
          const isDisabled = await maxOverAllocationInput.isDisabled();
          if (isDisabled) {
            console.log('✅ Configuration dependency validation working');
          }
          
          // Re-enable and test percentage validation
          await overAllocationCheckbox.check();
          await maxOverAllocationInput.fill('200'); // Invalid
          
          const percentValidation = page.locator('text=/maximum|exceed/i');
          if (await percentValidation.count() > 0) {
            console.log('✅ Percentage validation in dependent fields working');
          }
        }
      }
    });

    test('should handle settings persistence and rollback', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to system settings
      const systemTab = page.locator('button:has-text("System Settings")');
      if (await systemTab.count() > 0) {
        await systemTab.click();
        await page.waitForTimeout(1000);

        // Get initial work hours value
        const workHoursInput = page.locator('input[name="defaultWorkHoursPerWeek"]');
        let initialValue = '';
        if (await workHoursInput.count() > 0) {
          initialValue = await workHoursInput.inputValue();
          
          // Change value
          await workHoursInput.fill('35');
          
          // Save settings
          const saveButton = page.locator('button:has-text("Save"), button[type="submit"]');
          if (await saveButton.count() > 0) {
            await saveButton.click();
            await page.waitForTimeout(1000);
            
            // Check for success message
            const successMsg = page.locator('text=/saved|success|updated/i');
            if (await successMsg.count() > 0) {
              console.log('✅ Settings persistence working');
            }
          }
          
          // Reload page and verify persistence
          await page.reload();
          await helpers.setupPage();
          await systemTab.click();
          await page.waitForTimeout(1000);
          
          const newValue = await workHoursInput.inputValue();
          if (newValue === '35') {
            console.log('✅ Settings persistence across page reloads verified');
          }
          
          // Restore original value
          await workHoursInput.fill(initialValue);
          if (await saveButton.count() > 0) {
            await saveButton.click();
          }
        }
      }
    });

    test('should support configuration import/export', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for configuration export/import options
      const exportButton = page.locator('button:has-text("Export Settings"), button:has-text("Export Configuration")');
      const importButton = page.locator('button:has-text("Import Settings"), button:has-text("Import Configuration")');
      
      if (await exportButton.count() > 0) {
        // Test configuration export
        const downloadPromise = page.waitForEvent('download');
        await exportButton.click();
        
        try {
          const download = await downloadPromise;
          expect(download.suggestedFilename()).toMatch(/settings|config/i);
          console.log('✅ Configuration export functionality available');
        } catch {
          console.log('ℹ️ Configuration export initiated (download may not complete in test)');
        }
      }
      
      if (await importButton.count() > 0) {
        await importButton.click();
        await page.waitForTimeout(500);
        
        // Look for file upload interface
        const fileInput = page.locator('input[type="file"]');
        if (await fileInput.count() > 0) {
          console.log('✅ Configuration import functionality available');
        }
      }
    });
  });

  test.describe('Backup and Restore Functionality', () => {
    test('should provide manual backup creation', async ({ authenticatedPage, testHelpers }) => {
      await testHelpers.navigateTo('/settings');
      await testHelpers.waitForPageContent();

      // Look for backup section or option
      const backupSection = authenticatedPage.locator('text=/backup|archive|export data/i, button:has-text("Backup")');
      
      if (await backupSection.count() > 0) {
        console.log('✅ Backup functionality found');
        
        // Click on backup option
        await backupSection.first().click();
        await authenticatedPage.waitForTimeout(500);
        
        // Look for backup creation button
        const createBackupButton = authenticatedPage.locator('button:has-text("Create Backup"), button:has-text("Generate Backup")');
        
        if (await createBackupButton.count() > 0) {
          await createBackupButton.click();
          
          // Check for backup progress or completion
          const backupStatus = authenticatedPage.locator('text=/creating|generating|completed|progress/i');
          
          try {
            await expect(backupStatus.first()).toBeVisible({ timeout: 5000 });
            console.log('✅ Manual backup creation process initiated');
          } catch {
            console.log('ℹ️ Backup creation too fast to observe progress');
          }
        }
      } else {
        // Alternative: Check for data export as backup
        const exportButton = authenticatedPage.locator('button:has-text("Export")');
        if (await exportButton.isVisible()) {
          await exportButton.click();
          await authenticatedPage.waitForTimeout(500);
          
          const exportOptions = authenticatedPage.locator('text=/all data|complete export|full backup/i');
          if (await exportOptions.count() > 0) {
            console.log('✅ Data export available as backup alternative');
          }
        }
      }
    });

    test('should display backup history and management', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for backup management interface
      const backupMgmt = page.locator('text=/backup history|previous backups|backup list/i');
      
      if (await backupMgmt.count() > 0) {
        await backupMgmt.first().click();
        await page.waitForTimeout(1000);
        
        // Check for backup list
        const backupList = page.locator('table, .backup-list, .backup-item');
        if (await backupList.count() > 0) {
          console.log('✅ Backup history and management interface available');
          
          // Check for backup actions
          const backupActions = page.locator('button:has-text("Download"), button:has-text("Restore"), button:has-text("Delete")');
          if (await backupActions.count() > 0) {
            console.log('✅ Backup management actions (download/restore/delete) available');
          }
          
          // Check for backup metadata
          const backupMeta = page.locator('text=/size|date|type|status/i');
          if (await backupMeta.count() > 0) {
            console.log('✅ Backup metadata display available');
          }
        }
      }
    });

    test('should support backup verification', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for backup verification or integrity check
      const verifyOption = page.locator('button:has-text("Verify"), button:has-text("Check Integrity"), text=/verify backup/i');
      
      if (await verifyOption.count() > 0) {
        await verifyOption.first().click();
        await page.waitForTimeout(1000);
        
        // Check for verification results
        const verificationResults = page.locator('text=/valid|invalid|corrupted|healthy/i, .verification-result');
        
        if (await verificationResults.count() > 0) {
          console.log('✅ Backup verification functionality available');
        }
      } else {
        // Alternative: Check for backup download and file validation
        const downloadBackup = page.locator('button:has-text("Download Backup")');
        if (await downloadBackup.count() > 0) {
          console.log('✅ Backup download available for manual verification');
        }
      }
    });

    test('should handle restore operations', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for restore functionality
      const restoreOption = page.locator('button:has-text("Restore"), text=/restore from backup/i');
      
      if (await restoreOption.count() > 0) {
        await restoreOption.first().click();
        await page.waitForTimeout(500);
        
        // Check for restore interface
        const restoreInterface = page.locator('text=/select backup|choose file|restore options/i');
        
        if (await restoreInterface.count() > 0) {
          console.log('✅ Restore functionality interface available');
          
          // Check for restore warnings
          const warnings = page.locator('text=/warning|caution|overwrite|irreversible/i');
          if (await warnings.count() > 0) {
            console.log('✅ Restore operation warnings displayed');
          }
          
          // Check for restore confirmation
          const confirmationStep = page.locator('button:has-text("Confirm"), input[type="checkbox"]');
          if (await confirmationStep.count() > 0) {
            console.log('✅ Restore operation requires confirmation');
          }
        }
      }
    });
  });

  test.describe('System Health Monitoring', () => {
    test('should display comprehensive health dashboard', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for health monitoring section
      const healthSection = page.locator('text=/health|monitoring|status|diagnostics/i');
      
      if (await healthSection.count() > 0) {
        await healthSection.first().click();
        await page.waitForTimeout(1000);
        
        // Check for health metrics
        const healthMetrics = [
          'Database',
          'API',
          'Email',
          'Storage',
          'Memory',
          'CPU'
        ];
        
        let foundMetrics = 0;
        for (const metric of healthMetrics) {
          const metricElement = page.locator(`text=${metric}, text=/^${metric}/i`);
          if (await metricElement.count() > 0) {
            foundMetrics++;
          }
        }
        
        if (foundMetrics > 0) {
          console.log(`✅ Health monitoring with ${foundMetrics} system metrics`);
        }
      } else {
        // Alternative: Check for system information
        const sysInfo = page.locator('text=/system info|about|version/i');
        if (await sysInfo.count() > 0) {
          console.log('✅ System information available as health alternative');
        }
      }
    });

    test('should show system performance metrics', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for performance metrics
      const perfMetrics = page.locator('text=/performance|response time|uptime|load/i');
      
      if (await perfMetrics.count() > 0) {
        console.log('✅ System performance metrics available');
        
        // Check for metric values
        const metricValues = page.locator('text=/ms|%|MB|GB|seconds|minutes/');
        if (await metricValues.count() > 0) {
          console.log('✅ Performance metric values displayed');
        }
        
        // Check for performance charts
        const perfCharts = page.locator('.chart, .graph, canvas');
        if (await perfCharts.count() > 0) {
          console.log('✅ Performance visualization charts available');
        }
      }
    });

    test('should provide alerting and notification configuration', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Navigate to notification settings
      const notifTab = page.locator('button:has-text("Email Notifications")');
      if (await notifTab.count() > 0) {
        await notifTab.click();
        await page.waitForTimeout(1000);
        
        // Check for alert configuration
        const alertSettings = page.locator('text=/alert|threshold|warning|critical/i');
        
        if (await alertSettings.count() > 0) {
          console.log('✅ Alert and notification configuration available');
          
          // Check for threshold settings
          const thresholdInputs = page.locator('input[type="number"], input[name*="threshold"]');
          if (await thresholdInputs.count() > 0) {
            console.log('✅ Alert threshold configuration available');
          }
          
          // Check for notification preferences
          const notifPrefs = page.locator('input[type="checkbox"], select[name*="notification"]');
          if (await notifPrefs.count() > 0) {
            console.log('✅ Notification preference settings available');
          }
        }
      }
    });

    test('should monitor system resource usage', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Look for resource monitoring
      const resourceSection = page.locator('text=/resources|usage|disk|memory|cpu/i');
      
      if (await resourceSection.count() > 0) {
        console.log('✅ System resource monitoring available');
        
        // Check for resource usage displays
        const usageDisplays = page.locator('text=/used|free|available|total/i, .progress-bar, .usage-meter');
        
        if (await usageDisplays.count() > 0) {
          console.log('✅ Resource usage displays and meters available');
        }
        
        // Check for resource alerts
        const resourceAlerts = page.locator('text=/low space|high usage|warning/i, .alert, .warning');
        
        if (await resourceAlerts.count() > 0) {
          console.log('✅ Resource usage alerts and warnings displayed');
        }
      }
    });
  });

  test.describe('Audit Log Advanced Features', () => {
    test('should provide comprehensive audit filtering', async ({ page }) => {
      // Navigate to audit log
      await setupPageWithAuth(page, '/audit-log');
      await helpers.setupPage();

      // Check for advanced filtering options
      const filterOptions = [
        'select[name="table"], select[name="entity"]',
        'select[name="action"]', 
        'select[name="user"], input[name="user"]',
        'input[type="date"], input[name*="date"]'
      ];

      let activeFilters = 0;
      for (const filterSelector of filterOptions) {
        const filterElement = page.locator(filterSelector);
        if (await filterElement.count() > 0) {
          activeFilters++;
        }
      }

      expect(activeFilters).toBeGreaterThan(2);
      console.log(`✅ Comprehensive audit filtering with ${activeFilters} filter types`);

      // Test filter interaction
      const tableFilter = page.locator('select[name="table"], select[name="entity"]');
      if (await tableFilter.count() > 0) {
        const options = await tableFilter.locator('option').count();
        if (options > 1) {
          await tableFilter.selectOption({ index: 1 });
          await page.waitForTimeout(1000);
          
          // Verify results updated
          const auditEntries = page.locator('tbody tr, .audit-entry');
          expect(await auditEntries.count()).toBeGreaterThanOrEqual(0);
          console.log('✅ Audit filtering functionality working');
        }
      }
    });

    test('should support undo operations with verification', async ({ page }) => {
      await setupPageWithAuth(page, '/audit-log');
      await helpers.setupPage();

      // Look for undo buttons
      const undoButtons = page.locator('button:has-text("Undo"), button[aria-label*="undo"]');
      
      if (await undoButtons.count() > 0) {
        console.log('✅ Undo operation buttons available');
        
        // Click first undo button (if any)
        await undoButtons.first().click();
        await page.waitForTimeout(500);
        
        // Check for undo confirmation
        const undoConfirmation = page.locator('text=/confirm|are you sure|undo this/i, button:has-text("Yes"), button:has-text("Confirm")');
        
        if (await undoConfirmation.count() > 0) {
          console.log('✅ Undo operation requires confirmation');
          
          // Cancel the undo for safety
          const cancelButton = page.locator('button:has-text("Cancel"), button:has-text("No")');
          if (await cancelButton.count() > 0) {
            await cancelButton.click();
          }
        }
      }

      // Check for bulk undo options
      const bulkUndo = page.locator('button:has-text("Bulk Undo"), button:has-text("Undo Selected")');
      if (await bulkUndo.count() > 0) {
        console.log('✅ Bulk undo operations available');
      }
    });

    test('should provide audit data export capabilities', async ({ page }) => {
      await setupPageWithAuth(page, '/audit-log');
      await helpers.setupPage();

      // Look for export options
      const exportButton = page.locator('button:has-text("Export"), button:has-text("Download")');
      
      if (await exportButton.count() > 0) {
        await exportButton.click();
        await page.waitForTimeout(500);
        
        // Check for export format options
        const exportFormats = page.locator('text=/CSV|Excel|PDF|JSON/i');
        
        if (await exportFormats.count() > 0) {
          console.log('✅ Audit data export with multiple format options');
          
          // Test CSV export
          const csvOption = page.locator('text=CSV, button:has-text("CSV")');
          if (await csvOption.count() > 0) {
            const downloadPromise = page.waitForEvent('download');
            await csvOption.click();
            
            try {
              const download = await downloadPromise;
              expect(download.suggestedFilename()).toMatch(/audit.*\.csv/i);
              console.log('✅ Audit CSV export functionality working');
            } catch {
              console.log('ℹ️ Audit export initiated (download may not complete in test)');
            }
          }
        }
      }
    });

    test('should display audit statistics and insights', async ({ page }) => {
      await setupPageWithAuth(page, '/audit-log');
      await helpers.setupPage();

      // Look for audit statistics
      const auditStats = page.locator('text=/total changes|actions today|top users|most active/i, .stat-card, .summary-card');
      
      if (await auditStats.count() > 0) {
        console.log('✅ Audit statistics and insights available');
        
        // Check for audit charts or visualizations
        const auditCharts = page.locator('.chart, .graph, canvas, svg');
        if (await auditCharts.count() > 0) {
          console.log('✅ Audit data visualization charts available');
        }
        
        // Check for audit trends
        const trendIndicators = page.locator('text=/trend|increase|decrease|activity/i');
        if (await trendIndicators.count() > 0) {
          console.log('✅ Audit trend analysis available');
        }
      }
    });
  });

  test.describe('Administrative Integration Tests', () => {
    test('should maintain consistency across admin sections', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Test navigation between admin sections
      const adminSections = [
        'System Settings',
        'Import Settings', 
        'Email Notifications',
        'User Permissions'
      ];

      for (const section of adminSections) {
        const sectionTab = page.locator(`button:has-text("${section}"), [data-tab*="${section.toLowerCase().replace(' ', '')}"]`);
        
        if (await sectionTab.count() > 0) {
          await sectionTab.click();
          await page.waitForTimeout(500);
          
          // Verify section content loads
          const sectionContent = page.locator('.tab-content, [role="tabpanel"], .settings-content');
          expect(await sectionContent.count()).toBeGreaterThan(0);
          
          console.log(`✅ ${section} section accessible and functional`);
        }
      }
    });

    test('should handle administrative error scenarios gracefully', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Test invalid form submissions
      const systemTab = page.locator('button:has-text("System Settings")');
      if (await systemTab.count() > 0) {
        await systemTab.click();
        await page.waitForTimeout(1000);

        // Test invalid work hours
        const workHoursInput = page.locator('input[name="defaultWorkHoursPerWeek"]');
        if (await workHoursInput.count() > 0) {
          await workHoursInput.fill('-10'); // Invalid negative value
          
          const saveButton = page.locator('button:has-text("Save")');
          if (await saveButton.count() > 0) {
            await saveButton.click();
            await page.waitForTimeout(1000);
            
            // Check for error message
            const errorMsg = page.locator('text=/error|invalid|must be positive/i, .text-destructive');
            if (await errorMsg.count() > 0) {
              console.log('✅ Administrative form validation error handling working');
            }
          }
        }
      }
    });

    test('should preserve admin state during navigation', async ({ page }) => {
      await setupPageWithAuth(page, '/settings');
      await helpers.setupPage();

      // Make changes in system settings
      const systemTab = page.locator('button:has-text("System Settings")');
      if (await systemTab.count() > 0) {
        await systemTab.click();
        await page.waitForTimeout(1000);

        const workHoursInput = page.locator('input[name="defaultWorkHoursPerWeek"]');
        if (await workHoursInput.count() > 0) {
          const originalValue = await workHoursInput.inputValue();
          await workHoursInput.fill('38');
          
          // Navigate to another tab
          const importTab = page.locator('button:has-text("Import Settings")');
          if (await importTab.count() > 0) {
            await importTab.click();
            await page.waitForTimeout(500);
            
            // Navigate back to system settings
            await systemTab.click();
            await page.waitForTimeout(500);
            
            // Check if unsaved changes are preserved
            const currentValue = await workHoursInput.inputValue();
            if (currentValue === '38') {
              console.log('✅ Administrative state preservation during navigation working');
            }
            
            // Restore original value
            await workHoursInput.fill(originalValue);
          }
        }
      }
    });
  });
});